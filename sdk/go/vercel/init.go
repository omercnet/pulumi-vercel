// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vercel:index/alias:Alias":
		r = &Alias{}
	case "vercel:index/deployment:Deployment":
		r = &Deployment{}
	case "vercel:index/dnsRecord:DnsRecord":
		r = &DnsRecord{}
	case "vercel:index/project:Project":
		r = &Project{}
	case "vercel:index/projectDomain:ProjectDomain":
		r = &ProjectDomain{}
	case "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable":
		r = &ProjectEnvironmentVariable{}
	case "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable":
		r = &SharedEnvironmentVariable{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:vercel" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"vercel",
		"index/alias",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/deployment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/dnsRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectEnvironmentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/sharedEnvironmentVariable",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"vercel",
		&pkg{version},
	)
}
