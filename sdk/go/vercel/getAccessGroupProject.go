// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

func LookupAccessGroupProject(ctx *pulumi.Context, args *LookupAccessGroupProjectArgs, opts ...pulumi.InvokeOption) (*LookupAccessGroupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessGroupProjectResult
	err := ctx.Invoke("vercel:index/getAccessGroupProject:getAccessGroupProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessGroupProject.
type LookupAccessGroupProjectArgs struct {
	AccessGroupId string  `pulumi:"accessGroupId"`
	ProjectId     string  `pulumi:"projectId"`
	TeamId        *string `pulumi:"teamId"`
}

// A collection of values returned by getAccessGroupProject.
type LookupAccessGroupProjectResult struct {
	AccessGroupId string `pulumi:"accessGroupId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	Role      string `pulumi:"role"`
	TeamId    string `pulumi:"teamId"`
}

func LookupAccessGroupProjectOutput(ctx *pulumi.Context, args LookupAccessGroupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupAccessGroupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessGroupProjectResultOutput, error) {
			args := v.(LookupAccessGroupProjectArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAccessGroupProjectResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getAccessGroupProject:getAccessGroupProject", args, &rv, "", opts...)
			if err != nil {
				return LookupAccessGroupProjectResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAccessGroupProjectResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAccessGroupProjectResultOutput), nil
			}
			return output, nil
		}).(LookupAccessGroupProjectResultOutput)
}

// A collection of arguments for invoking getAccessGroupProject.
type LookupAccessGroupProjectOutputArgs struct {
	AccessGroupId pulumi.StringInput    `pulumi:"accessGroupId"`
	ProjectId     pulumi.StringInput    `pulumi:"projectId"`
	TeamId        pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupAccessGroupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getAccessGroupProject.
type LookupAccessGroupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupAccessGroupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupProjectResult)(nil)).Elem()
}

func (o LookupAccessGroupProjectResultOutput) ToLookupAccessGroupProjectResultOutput() LookupAccessGroupProjectResultOutput {
	return o
}

func (o LookupAccessGroupProjectResultOutput) ToLookupAccessGroupProjectResultOutputWithContext(ctx context.Context) LookupAccessGroupProjectResultOutput {
	return o
}

func (o LookupAccessGroupProjectResultOutput) AccessGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.AccessGroupId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessGroupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAccessGroupProjectResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupAccessGroupProjectResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.Role }).(pulumi.StringOutput)
}

func (o LookupAccessGroupProjectResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessGroupProjectResultOutput{})
}
