name: release
on:
  push:
    tags:
      - v*.*.*
      - "!v*.*.*-**"

env:
  AWS_REGION: us-west-2
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  PROVIDER: vercel
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_URL: https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PULUMI_MISSING_DOCS_ERROR: true
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TRAVIS_OS_NAME: linux

  GOVERSION: 1.20.x
  DOTNETVERSION: 6.0
  NODEVERSION: 16.x
  PYTHONVERSION: 3.8

jobs:
  create_docs_build:
    name: create_docs_build
    needs: tag_sdk
    runs-on: ubuntu-latest
    steps:
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - env:
          GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}
        name: Dispatch Event
        run: pulumictl create docs-build pulumi-${{ env.PROVIDER }}
          ${GITHUB_REF#refs/tags/}

  publish:
    name: publish
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: us-east-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-external-id: upload-pulumi-release
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}
      - name: Set PreRelease Version
        run:
          echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)"
          >> $GITHUB_ENV
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: -p 1 release --rm-dist --timeout 90m0s
          version: latest
      - if: failure() && github.event_name == 'push'
        name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          author_name: Failure in publishing binaries
          fields: repo,commit,author,action
          status: ${{ job.status }}

  publish_sdk:
    name: publish_sdk
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Checkout Scripts Repo
        uses: actions/checkout@v2
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Download python SDK
        uses: actions/download-artifact@v2
        with:
          name: python-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/
      - name: Uncompress python SDK
        run: tar -zxf ${{github.workspace}}/sdk/python.tar.gz -C
          ${{ github.workspace }}/sdk/python
      - name: Download dotnet SDK
        uses: actions/download-artifact@v2
        with:
          name: dotnet-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/
      - name: Uncompress dotnet SDK
        run: tar -zxf ${{github.workspace}}/sdk/dotnet.tar.gz -C
          ${{github.workspace}}/sdk/dotnet
      - name: Download nodejs SDK
        uses: actions/download-artifact@v2
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress nodejs SDK
        run: tar -zxf ${{github.workspace}}/sdk/nodejs.tar.gz -C
          ${{github.workspace}}/sdk/nodejs
      - run: python -m pip install pip twine
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: Publish SDKs
        run: ./ci-scripts/ci/publish-tfgen-package ${{ github.workspace }}
      - name: Set PACKAGE_VERSION to Env
        run:
          echo "PACKAGE_VERSION=v$(pulumictl get version --language generic)" >>
          $GITHUB_ENV
      - if: failure() && github.event_name == 'push'
        name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          author_name: Failure in publishing SDK
          fields: repo,commit,author,action
          status: ${{ job.status }}

  tag_sdk:
    name: tag_sdk
    needs: publish_sdk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Add SDK version tag
        run:
          git tag sdk/v$(pulumictl get version --language generic) && git push origin
          sdk/v$(pulumictl get version --language generic)
