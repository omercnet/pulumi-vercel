// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Function CPU resource for a Project.
 *
 * This controls the maximum amount of CPU utilization your Serverless Functions can use while executing. Standard is optimal for most frontend workloads. You can override this per function using the vercel.json file.
 *
 * A new Deployment is required for your changes to take effect.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleProjectFunctionCpu = new vercel.ProjectFunctionCpu("exampleProjectFunctionCpu", {
 *     projectId: exampleProject.id,
 *     cpu: "performance",
 * });
 * ```
 *
 * ## Import
 *
 * You can import via the team_id and project_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/projectFunctionCpu:ProjectFunctionCpu example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class ProjectFunctionCpu extends pulumi.CustomResource {
    /**
     * Get an existing ProjectFunctionCpu resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectFunctionCpuState, opts?: pulumi.CustomResourceOptions): ProjectFunctionCpu {
        return new ProjectFunctionCpu(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/projectFunctionCpu:ProjectFunctionCpu';

    /**
     * Returns true if the given object is an instance of ProjectFunctionCpu.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectFunctionCpu {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectFunctionCpu.__pulumiType;
    }

    /**
     * The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).
     */
    public readonly cpu!: pulumi.Output<string>;
    /**
     * The ID of the Project to adjust the CPU for.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a ProjectFunctionCpu resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectFunctionCpuArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectFunctionCpuArgs | ProjectFunctionCpuState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectFunctionCpuState | undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as ProjectFunctionCpuArgs | undefined;
            if ((!args || args.cpu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpu'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectFunctionCpu.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectFunctionCpu resources.
 */
export interface ProjectFunctionCpuState {
    /**
     * The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).
     */
    cpu?: pulumi.Input<string>;
    /**
     * The ID of the Project to adjust the CPU for.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectFunctionCpu resource.
 */
export interface ProjectFunctionCpuArgs {
    /**
     * The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).
     */
    cpu: pulumi.Input<string>;
    /**
     * The ID of the Project to adjust the CPU for.
     */
    projectId: pulumi.Input<string>;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
