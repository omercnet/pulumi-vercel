// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetProject
    {
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("vercel:index/getProject:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectResult>("vercel:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("passwordProtection")]
        public Inputs.GetProjectPasswordProtectionArgs? PasswordProtection { get; set; }

        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetProjectArgs()
        {
        }
        public static new GetProjectArgs Empty => new GetProjectArgs();
    }

    public sealed class GetProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("passwordProtection")]
        public Input<Inputs.GetProjectPasswordProtectionInputArgs>? PasswordProtection { get; set; }

        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetProjectInvokeArgs()
        {
        }
        public static new GetProjectInvokeArgs Empty => new GetProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        public readonly string BuildCommand;
        public readonly string DevCommand;
        public readonly ImmutableArray<Outputs.GetProjectEnvironmentResult> Environments;
        public readonly string Framework;
        public readonly Outputs.GetProjectGitRepositoryResult GitRepository;
        public readonly string Id;
        public readonly string IgnoreCommand;
        public readonly string InstallCommand;
        public readonly string Name;
        public readonly string OutputDirectory;
        public readonly Outputs.GetProjectPasswordProtectionResult? PasswordProtection;
        public readonly bool PublicSource;
        public readonly string RootDirectory;
        public readonly string ServerlessFunctionRegion;
        public readonly string TeamId;
        public readonly Outputs.GetProjectVercelAuthenticationResult VercelAuthentication;

        [OutputConstructor]
        private GetProjectResult(
            string buildCommand,

            string devCommand,

            ImmutableArray<Outputs.GetProjectEnvironmentResult> environments,

            string framework,

            Outputs.GetProjectGitRepositoryResult gitRepository,

            string id,

            string ignoreCommand,

            string installCommand,

            string name,

            string outputDirectory,

            Outputs.GetProjectPasswordProtectionResult? passwordProtection,

            bool publicSource,

            string rootDirectory,

            string serverlessFunctionRegion,

            string teamId,

            Outputs.GetProjectVercelAuthenticationResult vercelAuthentication)
        {
            BuildCommand = buildCommand;
            DevCommand = devCommand;
            Environments = environments;
            Framework = framework;
            GitRepository = gitRepository;
            Id = id;
            IgnoreCommand = ignoreCommand;
            InstallCommand = installCommand;
            Name = name;
            OutputDirectory = outputDirectory;
            PasswordProtection = passwordProtection;
            PublicSource = publicSource;
            RootDirectory = rootDirectory;
            ServerlessFunctionRegion = serverlessFunctionRegion;
            TeamId = teamId;
            VercelAuthentication = vercelAuthentication;
        }
    }
}
