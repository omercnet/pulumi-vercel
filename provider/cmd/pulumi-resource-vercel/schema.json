{
    "name": "vercel",
    "displayName": "Vercel",
    "keywords": [
        "pulumi",
        "vercel",
        "category/cloud"
    ],
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`vercel` Terraform Provider](https://github.com/vercel/terraform-provider-vercel).",
    "repository": "https://github.com/pulumiverse/pulumi-vercel",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-vercel/sdk/go/vercel",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/vercel",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_vercel",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "types": {
        "vercel:index/DeploymentProjectSettings:DeploymentProjectSettings": {
            "properties": {
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this deployment. If omitted, no framework is selected.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n"
                }
            },
            "type": "object"
        },
        "vercel:index/DnsRecordSrv:DnsRecordSrv": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The TCP or UDP port on which the service is to be found.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host, lower value means more preferred.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The canonical hostname of the machine providing the service, ending in a dot.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "A relative weight for records with the same priority, higher value means higher chance of getting picked.\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "priority",
                "target",
                "weight"
            ]
        },
        "vercel:index/ProjectEnvironment:ProjectEnvironment": {
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "targets",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "sensitive",
                        "targets",
                        "value"
                    ]
                }
            }
        },
        "vercel:index/ProjectGitComments:ProjectGitComments": {
            "properties": {
                "onCommit": {
                    "type": "boolean",
                    "description": "Whether Commit comments are enabled\n"
                },
                "onPullRequest": {
                    "type": "boolean",
                    "description": "Whether Pull Request comments are enabled\n"
                }
            },
            "type": "object",
            "required": [
                "onCommit",
                "onPullRequest"
            ]
        },
        "vercel:index/ProjectGitRepository:ProjectGitRepository": {
            "properties": {
                "deployHooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectGitRepositoryDeployHook:ProjectGitRepositoryDeployHook"
                    },
                    "description": "Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.\n"
                },
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "productionBranch",
                        "repo",
                        "type"
                    ]
                }
            }
        },
        "vercel:index/ProjectGitRepositoryDeployHook:ProjectGitRepositoryDeployHook": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the deploy hook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the deploy hook.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A URL that, when a POST request is made to, will trigger a new deployment.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "ref"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "ref",
                        "url"
                    ]
                }
            }
        },
        "vercel:index/ProjectPasswordProtection:ProjectPasswordProtection": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, or `only_preview_deployments`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "password"
            ]
        },
        "vercel:index/ProjectTrustedIps:ProjectTrustedIps": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectTrustedIpsAddress:ProjectTrustedIpsAddress"
                    },
                    "description": "The allowed IP addressses and CIDR ranges with optional descriptions.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, `only_production_deployments`, or `only_preview_deployments`.\n"
                },
                "protectionMode": {
                    "type": "string",
                    "description": "Whether or not Trusted IPs is optional to access a deployment. Must be either `trusted_ip_required` or `trusted_ip_optional`. `trusted_ip_optional` is only available with Standalone Trusted IPs.\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "deploymentType",
                        "protectionMode"
                    ]
                }
            }
        },
        "vercel:index/ProjectTrustedIpsAddress:ProjectTrustedIpsAddress": {
            "properties": {
                "note": {
                    "type": "string",
                    "description": "A description for the value\n"
                },
                "value": {
                    "type": "string",
                    "description": "The address or CIDR range that can access deployments.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, `only_preview_deployments`, or `none`.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ]
        },
        "vercel:index/getProjectEnvironment:getProjectEnvironment": {
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the environment variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the environment variable\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the environment variable.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. Note that the value will be `null` for sensitive environment variables.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "gitBranch",
                "id",
                "key",
                "sensitive",
                "targets",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitComments:getProjectGitComments": {
            "properties": {
                "onCommit": {
                    "type": "boolean",
                    "description": "Whether Commit comments are enabled\n"
                },
                "onPullRequest": {
                    "type": "boolean",
                    "description": "Whether Pull Request comments are enabled\n"
                }
            },
            "type": "object",
            "required": [
                "onCommit",
                "onPullRequest"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitRepository:getProjectGitRepository": {
            "properties": {
                "deployHooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/getProjectGitRepositoryDeployHook:getProjectGitRepositoryDeployHook"
                    },
                    "description": "Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.\n"
                },
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "deployHooks",
                "productionBranch",
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitRepositoryDeployHook:getProjectGitRepositoryDeployHook": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the deploy hook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the deploy hook.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A URL that, when a POST request is made to, will trigger a new deployment.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "ref",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectPasswordProtection:getProjectPasswordProtection": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectTrustedIps:getProjectTrustedIps": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/getProjectTrustedIpsAddress:getProjectTrustedIpsAddress"
                    },
                    "description": "The allowed IP addressses and CIDR ranges with optional descriptions.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                },
                "protectionMode": {
                    "type": "string",
                    "description": "Whether or not Trusted IPs is required or optional to access a deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "deploymentType",
                "protectionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectTrustedIpsAddress:getProjectTrustedIpsAddress": {
            "properties": {
                "note": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "note",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the vercel package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        },
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "resources": {
        "vercel:index/alias:Alias": {
            "description": "Provides an Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "alias",
                "deploymentId",
                "teamId"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "alias",
                "deploymentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alias resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                        "language": {
                            "csharp": {
                                "name": "DeploymentAlias"
                            }
                        }
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The id of the Deployment the Alias should be associated with.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/attackChallengeMode:AttackChallengeMode": {
            "description": "Provides an Attack Challenge Mode resource.\n\nAttack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\nconst exampleAttackChallengeMode = new vercel.AttackChallengeMode(\"exampleAttackChallengeMode\", {\n    projectId: exampleProject.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\")\nexample_attack_challenge_mode = vercel.AttackChallengeMode(\"exampleAttackChallengeMode\",\n    project_id=example_project.id,\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    var exampleAttackChallengeMode = new Vercel.AttackChallengeMode(\"exampleAttackChallengeMode\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewAttackChallengeMode(ctx, \"exampleAttackChallengeMode\", \u0026vercel.AttackChallengeModeArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.AttackChallengeMode;\nimport com.pulumi.vercel.AttackChallengeModeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleAttackChallengeMode = new AttackChallengeMode(\"exampleAttackChallengeMode\", AttackChallengeModeArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n  exampleAttackChallengeMode:\n    type: vercel:AttackChallengeMode\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/attackChallengeMode:AttackChallengeMode example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Attack Challenge Mode is enabled or not.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to adjust the CPU for.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "enabled",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Attack Challenge Mode is enabled or not.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to adjust the CPU for.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackChallengeMode resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether Attack Challenge Mode is enabled or not.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to adjust the CPU for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/deployment:Deployment": {
            "properties": {
                "deleteOnDestroy": {
                    "type": "boolean"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A unique URL that is automatically generated for a deployment.\n"
                }
            },
            "required": [
                "domains",
                "production",
                "projectId",
                "teamId",
                "url"
            ],
            "inputProperties": {
                "deleteOnDestroy": {
                    "type": "boolean"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "deleteOnDestroy": {
                        "type": "boolean"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                    },
                    "environment": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                    },
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "projectSettings": {
                        "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                        "description": "Project settings that will be applied to the deployment.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "A unique URL that is automatically generated for a deployment.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/dnsRecord:DnsRecord": {
            "description": "Provides a DNS Record resource.\n\nDNS records are instructions that live in authoritative DNS servers and provide information about a domain.\n\n\u003e The `value` field must be specified on all DNS record types except `SRV`. When using `SRV` DNS records, the `srv` field must be specified.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/custom-domains#dns-records)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst dnsRecord = new vercel.DnsRecord(\"dnsRecord\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"A\",\n    value: \"192.168.0.1\",\n});\nconst aaaa = new vercel.DnsRecord(\"aaaa\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"AAAA\",\n    value: \"::0\",\n});\nconst alias = new vercel.DnsRecord(\"alias\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"ALIAS\",\n    value: \"example2.com.\",\n});\nconst caa = new vercel.DnsRecord(\"caa\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"CAA\",\n    value: \"1 issue \\\"letsencrypt.org\\\"\",\n});\nconst cname = new vercel.DnsRecord(\"cname\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"CNAME\",\n    value: \"example2.com.\",\n});\nconst mx = new vercel.DnsRecord(\"mx\", {\n    domain: \"example.com\",\n    mxPriority: 333,\n    ttl: 60,\n    type: \"MX\",\n    value: \"example2.com.\",\n});\nconst srv = new vercel.DnsRecord(\"srv\", {\n    domain: \"example.com\",\n    srv: {\n        port: 6000,\n        priority: 127,\n        target: \"example2.com.\",\n        weight: 60,\n    },\n    ttl: 60,\n    type: \"SRV\",\n});\nconst txt = new vercel.DnsRecord(\"txt\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"TXT\",\n    value: \"some text value\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\ndns_record = vercel.DnsRecord(\"dnsRecord\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"A\",\n    value=\"192.168.0.1\")\naaaa = vercel.DnsRecord(\"aaaa\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"AAAA\",\n    value=\"::0\")\nalias = vercel.DnsRecord(\"alias\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"ALIAS\",\n    value=\"example2.com.\")\ncaa = vercel.DnsRecord(\"caa\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"CAA\",\n    value=\"1 issue \\\"letsencrypt.org\\\"\")\ncname = vercel.DnsRecord(\"cname\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"CNAME\",\n    value=\"example2.com.\")\nmx = vercel.DnsRecord(\"mx\",\n    domain=\"example.com\",\n    mx_priority=333,\n    ttl=60,\n    type=\"MX\",\n    value=\"example2.com.\")\nsrv = vercel.DnsRecord(\"srv\",\n    domain=\"example.com\",\n    srv=vercel.DnsRecordSrvArgs(\n        port=6000,\n        priority=127,\n        target=\"example2.com.\",\n        weight=60,\n    ),\n    ttl=60,\n    type=\"SRV\")\ntxt = vercel.DnsRecord(\"txt\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"TXT\",\n    value=\"some text value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsRecord = new Vercel.DnsRecord(\"dnsRecord\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"A\",\n        Value = \"192.168.0.1\",\n    });\n\n    var aaaa = new Vercel.DnsRecord(\"aaaa\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"AAAA\",\n        Value = \"::0\",\n    });\n\n    var @alias = new Vercel.DnsRecord(\"alias\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"ALIAS\",\n        Value = \"example2.com.\",\n    });\n\n    var caa = new Vercel.DnsRecord(\"caa\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"CAA\",\n        Value = \"1 issue \\\"letsencrypt.org\\\"\",\n    });\n\n    var cname = new Vercel.DnsRecord(\"cname\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"CNAME\",\n        Value = \"example2.com.\",\n    });\n\n    var mx = new Vercel.DnsRecord(\"mx\", new()\n    {\n        Domain = \"example.com\",\n        MxPriority = 333,\n        Ttl = 60,\n        Type = \"MX\",\n        Value = \"example2.com.\",\n    });\n\n    var srv = new Vercel.DnsRecord(\"srv\", new()\n    {\n        Domain = \"example.com\",\n        Srv = new Vercel.Inputs.DnsRecordSrvArgs\n        {\n            Port = 6000,\n            Priority = 127,\n            Target = \"example2.com.\",\n            Weight = 60,\n        },\n        Ttl = 60,\n        Type = \"SRV\",\n    });\n\n    var txt = new Vercel.DnsRecord(\"txt\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"TXT\",\n        Value = \"some text value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewDnsRecord(ctx, \"dnsRecord\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tValue:  pulumi.String(\"192.168.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"aaaa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"AAAA\"),\n\t\t\tValue:  pulumi.String(\"::0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"alias\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"ALIAS\"),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"caa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"CAA\"),\n\t\t\tValue:  pulumi.String(\"1 issue \\\"letsencrypt.org\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"cname\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"CNAME\"),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"mx\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain:     pulumi.String(\"example.com\"),\n\t\t\tMxPriority: pulumi.Int(333),\n\t\t\tTtl:        pulumi.Int(60),\n\t\t\tType:       pulumi.String(\"MX\"),\n\t\t\tValue:      pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"srv\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tSrv: \u0026vercel.DnsRecordSrvArgs{\n\t\t\t\tPort:     pulumi.Int(6000),\n\t\t\t\tPriority: pulumi.Int(127),\n\t\t\t\tTarget:   pulumi.String(\"example2.com.\"),\n\t\t\t\tWeight:   pulumi.Int(60),\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(60),\n\t\t\tType: pulumi.String(\"SRV\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"txt\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"TXT\"),\n\t\t\tValue:  pulumi.String(\"some text value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.DnsRecord;\nimport com.pulumi.vercel.DnsRecordArgs;\nimport com.pulumi.vercel.inputs.DnsRecordSrvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dnsRecord = new DnsRecord(\"dnsRecord\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"A\")\n            .value(\"192.168.0.1\")\n            .build());\n\n        var aaaa = new DnsRecord(\"aaaa\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"AAAA\")\n            .value(\"::0\")\n            .build());\n\n        var alias = new DnsRecord(\"alias\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"ALIAS\")\n            .value(\"example2.com.\")\n            .build());\n\n        var caa = new DnsRecord(\"caa\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"CAA\")\n            .value(\"1 issue \\\"letsencrypt.org\\\"\")\n            .build());\n\n        var cname = new DnsRecord(\"cname\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"CNAME\")\n            .value(\"example2.com.\")\n            .build());\n\n        var mx = new DnsRecord(\"mx\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .mxPriority(333)\n            .ttl(60)\n            .type(\"MX\")\n            .value(\"example2.com.\")\n            .build());\n\n        var srv = new DnsRecord(\"srv\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .srv(DnsRecordSrvArgs.builder()\n                .port(6000)\n                .priority(127)\n                .target(\"example2.com.\")\n                .weight(60)\n                .build())\n            .ttl(60)\n            .type(\"SRV\")\n            .build());\n\n        var txt = new DnsRecord(\"txt\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"TXT\")\n            .value(\"some text value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dnsRecord:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      # for subdomain.example.com\n      ttl: 60\n      type: A\n      value: 192.168.0.1\n  aaaa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: AAAA\n      value: ::0\n  alias:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: ALIAS\n      value: example2.com.\n  caa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: CAA\n      value: 1 issue \"letsencrypt.org\"\n  cname:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: CNAME\n      value: example2.com.\n  mx:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      mxPriority: 333\n      ttl: 60\n      type: MX\n      value: example2.com.\n  srv:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      srv:\n        port: 6000\n        priority: 127\n        target: example2.com.\n        weight: 60\n      ttl: 60\n      type: SRV\n  txt:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: TXT\n      value: some text value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the record id.\n\n- record_id can be taken from the network tab inside developer tools, while you are on the domains page,\n\nor can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).\n\n```sh\n$ pulumi import vercel:index/dnsRecord:DnsRecord example rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and record_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- record_id can be taken from the network tab inside developer tools, while you are on the domains page,\n\nor can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).\n\n```sh\n$ pulumi import vercel:index/dnsRecord:DnsRecord example team_xxxxxxxxxxxxxxxxxxxxxxxx/rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the DNS record is for.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "required": [
                "comment",
                "domain",
                "name",
                "teamId",
                "ttl",
                "type"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the DNS record is for.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecord resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A comment explaining what the DNS record is for.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                    },
                    "mxPriority": {
                        "type": "integer",
                        "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                    },
                    "srv": {
                        "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                        "description": "Settings for an SRV record.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfig:EdgeConfig": {
            "description": "Provides an Edge Config resource.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleEdgeConfig = new vercel.EdgeConfig(\"exampleEdgeConfig\", {});\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\nconst exampleEdgeConfigToken = new vercel.EdgeConfigToken(\"exampleEdgeConfigToken\", {\n    edgeConfigId: exampleEdgeConfig.id,\n    label: \"example token\",\n});\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", {\n    projectId: exampleProject.id,\n    targets: [\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key: \"EDGE_CONFIG\",\n    value: exampleEdgeConfigToken.connectionString,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_edge_config = vercel.EdgeConfig(\"exampleEdgeConfig\")\nexample_project = vercel.Project(\"exampleProject\")\nexample_edge_config_token = vercel.EdgeConfigToken(\"exampleEdgeConfigToken\",\n    edge_config_id=example_edge_config.id,\n    label=\"example token\")\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\",\n    project_id=example_project.id,\n    targets=[\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key=\"EDGE_CONFIG\",\n    value=example_edge_config_token.connection_string)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleEdgeConfig = new Vercel.EdgeConfig(\"exampleEdgeConfig\");\n\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    var exampleEdgeConfigToken = new Vercel.EdgeConfigToken(\"exampleEdgeConfigToken\", new()\n    {\n        EdgeConfigId = exampleEdgeConfig.Id,\n        Label = \"example token\",\n    });\n\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n            \"development\",\n        },\n        Key = \"EDGE_CONFIG\",\n        Value = exampleEdgeConfigToken.ConnectionString,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleEdgeConfig, err := vercel.NewEdgeConfig(ctx, \"exampleEdgeConfig\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEdgeConfigToken, err := vercel.NewEdgeConfigToken(ctx, \"exampleEdgeConfigToken\", \u0026vercel.EdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: exampleEdgeConfig.ID(),\n\t\t\tLabel:        pulumi.String(\"example token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleProjectEnvironmentVariable\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t\tpulumi.String(\"development\"),\n\t\t\t},\n\t\t\tKey:   pulumi.String(\"EDGE_CONFIG\"),\n\t\t\tValue: exampleEdgeConfigToken.ConnectionString,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.EdgeConfigToken;\nimport com.pulumi.vercel.EdgeConfigTokenArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleEdgeConfig = new EdgeConfig(\"exampleEdgeConfig\");\n\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEdgeConfigToken = new EdgeConfigToken(\"exampleEdgeConfigToken\", EdgeConfigTokenArgs.builder()        \n            .edgeConfigId(exampleEdgeConfig.id())\n            .label(\"example token\")\n            .build());\n\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .targets(            \n                \"production\",\n                \"preview\",\n                \"development\")\n            .key(\"EDGE_CONFIG\")\n            .value(exampleEdgeConfigToken.connectionString())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEdgeConfig:\n    type: vercel:EdgeConfig\n  exampleProject:\n    type: vercel:Project\n  exampleEdgeConfigToken:\n    type: vercel:EdgeConfigToken\n    properties:\n      edgeConfigId: ${exampleEdgeConfig.id}\n      label: example token\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      targets:\n        - production\n        - preview\n        - development\n      key: EDGE_CONFIG\n      value: ${exampleEdgeConfigToken.connectionString}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfig:EdgeConfig example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfig:EdgeConfig example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name/slug of the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "name",
                "teamId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name/slug of the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfig resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name/slug of the Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfigSchema:EdgeConfigSchema": {
            "description": "An Edge Config Schema provides an existing Edge Config with a JSON schema. Use schema protection to prevent unexpected updates that may cause bugs or downtime.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.EdgeConfigSchema;\nimport com.pulumi.vercel.EdgeConfigSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleEdgeConfig = new EdgeConfig(\"exampleEdgeConfig\");\n\n        var exampleEdgeConfigSchema = new EdgeConfigSchema(\"exampleEdgeConfigSchema\", EdgeConfigSchemaArgs.builder()        \n            .id(exampleEdgeConfig.id())\n            .definition(\"\"\"\n{\n  \"title\": \"Greeting\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"greeting\": {\n      \"description\": \"A friendly greeting\",\n      \"type\": \"string\"\n    }\n  }\n}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEdgeConfig:\n    type: vercel:EdgeConfig\n  exampleEdgeConfigSchema:\n    type: vercel:EdgeConfigSchema\n    properties:\n      id: ${exampleEdgeConfig.id}\n      definition: |\n        {\n          \"title\": \"Greeting\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"greeting\": {\n              \"description\": \"A friendly greeting\",\n              \"type\": \"string\"\n            }\n          }\n        }\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "definition": {
                    "type": "string",
                    "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "definition",
                "teamId"
            ],
            "inputProperties": {
                "definition": {
                    "type": "string",
                    "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "definition"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfigSchema resources.\n",
                "properties": {
                    "definition": {
                        "type": "string",
                        "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfigToken:EdgeConfigToken": {
            "description": "Provides an Edge Config Token resource.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config token is used to authenticate against an Edge Config's endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleEdgeConfig = new vercel.EdgeConfig(\"exampleEdgeConfig\", {});\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\nconst exampleEdgeConfigToken = new vercel.EdgeConfigToken(\"exampleEdgeConfigToken\", {\n    edgeConfigId: exampleEdgeConfig.id,\n    label: \"example token\",\n});\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", {\n    projectId: exampleProject.id,\n    targets: [\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key: \"EDGE_CONFIG\",\n    value: exampleEdgeConfigToken.connectionString,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_edge_config = vercel.EdgeConfig(\"exampleEdgeConfig\")\nexample_project = vercel.Project(\"exampleProject\")\nexample_edge_config_token = vercel.EdgeConfigToken(\"exampleEdgeConfigToken\",\n    edge_config_id=example_edge_config.id,\n    label=\"example token\")\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\",\n    project_id=example_project.id,\n    targets=[\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key=\"EDGE_CONFIG\",\n    value=example_edge_config_token.connection_string)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleEdgeConfig = new Vercel.EdgeConfig(\"exampleEdgeConfig\");\n\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    var exampleEdgeConfigToken = new Vercel.EdgeConfigToken(\"exampleEdgeConfigToken\", new()\n    {\n        EdgeConfigId = exampleEdgeConfig.Id,\n        Label = \"example token\",\n    });\n\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n            \"development\",\n        },\n        Key = \"EDGE_CONFIG\",\n        Value = exampleEdgeConfigToken.ConnectionString,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleEdgeConfig, err := vercel.NewEdgeConfig(ctx, \"exampleEdgeConfig\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEdgeConfigToken, err := vercel.NewEdgeConfigToken(ctx, \"exampleEdgeConfigToken\", \u0026vercel.EdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: exampleEdgeConfig.ID(),\n\t\t\tLabel:        pulumi.String(\"example token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleProjectEnvironmentVariable\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t\tpulumi.String(\"development\"),\n\t\t\t},\n\t\t\tKey:   pulumi.String(\"EDGE_CONFIG\"),\n\t\t\tValue: exampleEdgeConfigToken.ConnectionString,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.EdgeConfigToken;\nimport com.pulumi.vercel.EdgeConfigTokenArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleEdgeConfig = new EdgeConfig(\"exampleEdgeConfig\");\n\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEdgeConfigToken = new EdgeConfigToken(\"exampleEdgeConfigToken\", EdgeConfigTokenArgs.builder()        \n            .edgeConfigId(exampleEdgeConfig.id())\n            .label(\"example token\")\n            .build());\n\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .targets(            \n                \"production\",\n                \"preview\",\n                \"development\")\n            .key(\"EDGE_CONFIG\")\n            .value(exampleEdgeConfigToken.connectionString())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEdgeConfig:\n    type: vercel:EdgeConfig\n  exampleProject:\n    type: vercel:Project\n  exampleEdgeConfigToken:\n    type: vercel:EdgeConfigToken\n    properties:\n      edgeConfigId: ${exampleEdgeConfig.id}\n      label: example token\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      targets:\n        - production\n        - preview\n        - development\n      key: EDGE_CONFIG\n      value: ${exampleEdgeConfigToken.connectionString}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id and token value.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.\n\n```sh\n$ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.\n\n```sh\n$ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n",
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n"
                },
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Edge Config Token.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                }
            },
            "required": [
                "connectionString",
                "edgeConfigId",
                "label",
                "teamId",
                "token"
            ],
            "inputProperties": {
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Edge Config Token.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "edgeConfigId",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfigToken resources.\n",
                "properties": {
                    "connectionString": {
                        "type": "string",
                        "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n"
                    },
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The ID of the Edge Config store.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/logDrain:LogDrain": {
            "description": "Provides a Configurable Log Drain resource.\n\n\u003e For Log Drain integrations, please see the [Integration Log Drain docs](https://vercel.com/docs/observability/log-drains#log-drains-integration).\n\nLog Drains collect all of your logs using a service specializing in storing app logs.\n\nTeams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.\n\n\u003e Only Pro and Enterprise teams can create Configurable Log Drains.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleEndpointVerification = vercel.getEndpointVerification({});\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\nconst exampleLogDrain = new vercel.LogDrain(\"exampleLogDrain\", {\n    deliveryFormat: \"json\",\n    environments: [\"production\"],\n    headers: {\n        \"some-key\": \"some-value\",\n    },\n    projectIds: [exampleProject.id],\n    samplingRate: 0.8,\n    secret: \"a_very_long_and_very_well_specified_secret\",\n    sources: [\"static\"],\n    endpoint: \"https://example.com/my-log-drain-endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\nimport pulumiverse_vercel as vercel\n\nexample_endpoint_verification = vercel.get_endpoint_verification()\nexample_project = vercel.Project(\"exampleProject\")\nexample_log_drain = vercel.LogDrain(\"exampleLogDrain\",\n    delivery_format=\"json\",\n    environments=[\"production\"],\n    headers={\n        \"some-key\": \"some-value\",\n    },\n    project_ids=[example_project.id],\n    sampling_rate=0.8,\n    secret=\"a_very_long_and_very_well_specified_secret\",\n    sources=[\"static\"],\n    endpoint=\"https://example.com/my-log-drain-endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleEndpointVerification = Vercel.GetEndpointVerification.Invoke();\n\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    var exampleLogDrain = new Vercel.LogDrain(\"exampleLogDrain\", new()\n    {\n        DeliveryFormat = \"json\",\n        Environments = new[]\n        {\n            \"production\",\n        },\n        Headers = \n        {\n            { \"some-key\", \"some-value\" },\n        },\n        ProjectIds = new[]\n        {\n            exampleProject.Id,\n        },\n        SamplingRate = 0.8,\n        Secret = \"a_very_long_and_very_well_specified_secret\",\n        Sources = new[]\n        {\n            \"static\",\n        },\n        Endpoint = \"https://example.com/my-log-drain-endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.GetEndpointVerification(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewLogDrain(ctx, \"exampleLogDrain\", \u0026vercel.LogDrainArgs{\n\t\t\tDeliveryFormat: pulumi.String(\"json\"),\n\t\t\tEnvironments: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\"some-key\": pulumi.String(\"some-value\"),\n\t\t\t},\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texampleProject.ID(),\n\t\t\t},\n\t\t\tSamplingRate: pulumi.Float64(0.8),\n\t\t\tSecret:       pulumi.String(\"a_very_long_and_very_well_specified_secret\"),\n\t\t\tSources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"static\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/my-log-drain-endpoint\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEndpointVerificationArgs;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.LogDrain;\nimport com.pulumi.vercel.LogDrainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleEndpointVerification = VercelFunctions.getEndpointVerification();\n\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleLogDrain = new LogDrain(\"exampleLogDrain\", LogDrainArgs.builder()        \n            .deliveryFormat(\"json\")\n            .environments(\"production\")\n            .headers(Map.of(\"some-key\", \"some-value\"))\n            .projectIds(exampleProject.id())\n            .samplingRate(0.8)\n            .secret(\"a_very_long_and_very_well_specified_secret\")\n            .sources(\"static\")\n            .endpoint(\"https://example.com/my-log-drain-endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleLogDrain:\n    type: vercel:LogDrain\n    properties:\n      deliveryFormat: json\n      environments:\n        - production\n      headers:\n        some-key: some-value\n      projectIds:\n        - ${exampleProject.id}\n      samplingRate: 0.8\n      secret: a_very_long_and_very_well_specified_secret\n      sources:\n        - static\n      endpoint: https://example.com/my-log-drain-endpoint\n  exampleProject:\n    type: vercel:Project\nvariables:\n  exampleEndpointVerification:\n    fn::invoke:\n      Function: vercel:getEndpointVerification\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the log_drain_id.\n\n- log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).\n\n```sh\n$ pulumi import vercel:index/logDrain:LogDrain example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).\n\n```sh\n$ pulumi import vercel:index/logDrain:LogDrain example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n",
            "properties": {
                "deliveryFormat": {
                    "type": "string",
                    "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom headers to include in requests to the log drain endpoint.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                },
                "samplingRate": {
                    "type": "number",
                    "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                    "secret": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "deliveryFormat",
                "endpoint",
                "environments",
                "secret",
                "sources",
                "teamId"
            ],
            "inputProperties": {
                "deliveryFormat": {
                    "type": "string",
                    "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom headers to include in requests to the log drain endpoint.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                },
                "samplingRate": {
                    "type": "number",
                    "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                    "secret": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "deliveryFormat",
                "endpoint",
                "environments",
                "sources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogDrain resources.\n",
                "properties": {
                    "deliveryFormat": {
                        "type": "string",
                        "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom headers to include in requests to the log drain endpoint.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                    },
                    "samplingRate": {
                        "type": "number",
                        "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                        "secret": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/project:Project": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\n// A project that is connected to a git repository.\n// Deployments will be created automatically\n// on every branch push and merges onto the Production Branch.\nconst withGit = new vercel.Project(\"withGit\", {\n    framework: \"nextjs\",\n    gitRepository: {\n        repo: \"vercel/some-repo\",\n        type: \"github\",\n    },\n});\n// A project that is not connected to a git repository.\n// Deployments will need to be created manually through\n// terraform, or via the vercel CLI.\nconst example = new vercel.Project(\"example\", {framework: \"nextjs\"});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\n# A project that is connected to a git repository.\n# Deployments will be created automatically\n# on every branch push and merges onto the Production Branch.\nwith_git = vercel.Project(\"withGit\",\n    framework=\"nextjs\",\n    git_repository=vercel.ProjectGitRepositoryArgs(\n        repo=\"vercel/some-repo\",\n        type=\"github\",\n    ))\n# A project that is not connected to a git repository.\n# Deployments will need to be created manually through\n# terraform, or via the vercel CLI.\nexample = vercel.Project(\"example\", framework=\"nextjs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A project that is connected to a git repository.\n    // Deployments will be created automatically\n    // on every branch push and merges onto the Production Branch.\n    var withGit = new Vercel.Project(\"withGit\", new()\n    {\n        Framework = \"nextjs\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Repo = \"vercel/some-repo\",\n            Type = \"github\",\n        },\n    });\n\n    // A project that is not connected to a git repository.\n    // Deployments will need to be created manually through\n    // terraform, or via the vercel CLI.\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Framework = \"nextjs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// A project that is connected to a git repository.\n\t\t// Deployments will be created automatically\n\t\t// on every branch push and merges onto the Production Branch.\n\t\t_, err := vercel.NewProject(ctx, \"withGit\", \u0026vercel.ProjectArgs{\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A project that is not connected to a git repository.\n\t\t// Deployments will need to be created manually through\n\t\t// terraform, or via the vercel CLI.\n\t\t_, err = vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // A project that is connected to a git repository.\n        // Deployments will be created automatically\n        // on every branch push and merges onto the Production Branch.\n        var withGit = new Project(\"withGit\", ProjectArgs.builder()        \n            .framework(\"nextjs\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .repo(\"vercel/some-repo\")\n                .type(\"github\")\n                .build())\n            .build());\n\n        // A project that is not connected to a git repository.\n        // Deployments will need to be created manually through\n        // terraform, or via the vercel CLI.\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .framework(\"nextjs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # A project that is connected to a git repository.\n  # // Deployments will be created automatically\n  # // on every branch push and merges onto the Production Branch.\n  withGit:\n    type: vercel:Project\n    properties:\n      framework: nextjs\n      gitRepository:\n        repo: vercel/some-repo\n        type: github\n  # A project that is not connected to a git repository.\n  # // Deployments will need to be created manually through\n  # // terraform, or via the vercel CLI.\n  example:\n    type: vercel:Project\n    properties:\n      framework: nextjs\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project ID.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "autoAssignCustomDomains": {
                    "type": "boolean",
                    "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                },
                "automaticallyExposeSystemEnvironmentVariables": {
                    "type": "boolean",
                    "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                },
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "customerSuccessCodeVisibility": {
                    "type": "boolean",
                    "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "directoryListing": {
                    "type": "boolean",
                    "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "functionFailover": {
                    "type": "boolean",
                    "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                },
                "gitComments": {
                    "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                    "description": "Configuration for Git Comments.\n"
                },
                "gitForkProtection": {
                    "type": "boolean",
                    "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                },
                "gitLfs": {
                    "type": "boolean",
                    "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "previewComments": {
                    "type": "boolean",
                    "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                },
                "prioritiseProductionBuilds": {
                    "type": "boolean",
                    "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                },
                "protectionBypassForAutomation": {
                    "type": "boolean",
                    "description": "Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `password_protection_for_automation_secret` field.\n"
                },
                "protectionBypassForAutomationSecret": {
                    "type": "string",
                    "description": "If `protection_bypass_for_automation` is enabled, use this value in the `x-vercel-protection-bypass` header to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments.\n"
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "skewProtection": {
                    "type": "string",
                    "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "trustedIps": {
                    "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                    "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "required": [
                "autoAssignCustomDomains",
                "automaticallyExposeSystemEnvironmentVariables",
                "customerSuccessCodeVisibility",
                "directoryListing",
                "functionFailover",
                "gitForkProtection",
                "gitLfs",
                "name",
                "prioritiseProductionBuilds",
                "protectionBypassForAutomationSecret",
                "serverlessFunctionRegion",
                "teamId",
                "vercelAuthentication"
            ],
            "inputProperties": {
                "autoAssignCustomDomains": {
                    "type": "boolean",
                    "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                },
                "automaticallyExposeSystemEnvironmentVariables": {
                    "type": "boolean",
                    "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                },
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "customerSuccessCodeVisibility": {
                    "type": "boolean",
                    "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "directoryListing": {
                    "type": "boolean",
                    "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "functionFailover": {
                    "type": "boolean",
                    "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                },
                "gitComments": {
                    "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                    "description": "Configuration for Git Comments.\n"
                },
                "gitForkProtection": {
                    "type": "boolean",
                    "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                },
                "gitLfs": {
                    "type": "boolean",
                    "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "previewComments": {
                    "type": "boolean",
                    "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                },
                "prioritiseProductionBuilds": {
                    "type": "boolean",
                    "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                },
                "protectionBypassForAutomation": {
                    "type": "boolean",
                    "description": "Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `password_protection_for_automation_secret` field.\n"
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "skewProtection": {
                    "type": "string",
                    "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "trustedIps": {
                    "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                    "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "autoAssignCustomDomains": {
                        "type": "boolean",
                        "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                    },
                    "automaticallyExposeSystemEnvironmentVariables": {
                        "type": "boolean",
                        "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                    },
                    "buildCommand": {
                        "type": "string",
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "customerSuccessCodeVisibility": {
                        "type": "boolean",
                        "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                    },
                    "devCommand": {
                        "type": "string",
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "directoryListing": {
                        "type": "boolean",
                        "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                        },
                        "description": "A set of Environment Variables that should be configured for the project.\n"
                    },
                    "framework": {
                        "type": "string",
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                    },
                    "functionFailover": {
                        "type": "boolean",
                        "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                    },
                    "gitComments": {
                        "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                        "description": "Configuration for Git Comments.\n"
                    },
                    "gitForkProtection": {
                        "type": "boolean",
                        "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                    },
                    "gitLfs": {
                        "type": "boolean",
                        "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "ignoreCommand": {
                        "type": "string",
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The desired name for the project.\n"
                    },
                    "outputDirectory": {
                        "type": "string",
                        "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "previewComments": {
                        "type": "boolean",
                        "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                    },
                    "prioritiseProductionBuilds": {
                        "type": "boolean",
                        "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                    },
                    "protectionBypassForAutomation": {
                        "type": "boolean",
                        "description": "Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `password_protection_for_automation_secret` field.\n"
                    },
                    "protectionBypassForAutomationSecret": {
                        "type": "string",
                        "description": "If `protection_bypass_for_automation` is enabled, use this value in the `x-vercel-protection-bypass` header to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments.\n"
                    },
                    "publicSource": {
                        "type": "boolean",
                        "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                    },
                    "rootDirectory": {
                        "type": "string",
                        "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                    },
                    "serverlessFunctionRegion": {
                        "type": "string",
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                    },
                    "skewProtection": {
                        "type": "string",
                        "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "trustedIps": {
                        "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                        "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectDomain:ProjectDomain": {
            "description": "Provides a Project Domain resource.\n\nA Project Domain is used to associate a domain name with a `vercel.Project`.\n\nBy default, Project Domains will be automatically applied to any `production` deployments.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\n// A simple domain that will be automatically\n// applied to each production deployment\nconst exampleProjectDomain = new vercel.ProjectDomain(\"exampleProjectDomain\", {\n    projectId: exampleProject.id,\n    domain: \"i-love.vercel.app\",\n});\n// A redirect of a domain name to a second domain name.\n// The status_code can optionally be controlled.\nconst exampleRedirect = new vercel.ProjectDomain(\"exampleRedirect\", {\n    projectId: exampleProject.id,\n    domain: \"i-also-love.vercel.app\",\n    redirect: exampleProjectDomain.domain,\n    redirectStatusCode: 307,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\")\n# A simple domain that will be automatically\n# applied to each production deployment\nexample_project_domain = vercel.ProjectDomain(\"exampleProjectDomain\",\n    project_id=example_project.id,\n    domain=\"i-love.vercel.app\")\n# A redirect of a domain name to a second domain name.\n# The status_code can optionally be controlled.\nexample_redirect = vercel.ProjectDomain(\"exampleRedirect\",\n    project_id=example_project.id,\n    domain=\"i-also-love.vercel.app\",\n    redirect=example_project_domain.domain,\n    redirect_status_code=307)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    // A simple domain that will be automatically\n    // applied to each production deployment\n    var exampleProjectDomain = new Vercel.ProjectDomain(\"exampleProjectDomain\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Domain = \"i-love.vercel.app\",\n    });\n\n    // A redirect of a domain name to a second domain name.\n    // The status_code can optionally be controlled.\n    var exampleRedirect = new Vercel.ProjectDomain(\"exampleRedirect\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Domain = \"i-also-love.vercel.app\",\n        Redirect = exampleProjectDomain.Domain,\n        RedirectStatusCode = 307,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A simple domain that will be automatically\n\t\t// applied to each production deployment\n\t\texampleProjectDomain, err := vercel.NewProjectDomain(ctx, \"exampleProjectDomain\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tDomain:    pulumi.String(\"i-love.vercel.app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A redirect of a domain name to a second domain name.\n\t\t// The status_code can optionally be controlled.\n\t\t_, err = vercel.NewProjectDomain(ctx, \"exampleRedirect\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDomain:             pulumi.String(\"i-also-love.vercel.app\"),\n\t\t\tRedirect:           exampleProjectDomain.Domain,\n\t\t\tRedirectStatusCode: pulumi.Int(307),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectDomain;\nimport com.pulumi.vercel.ProjectDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        // A simple domain that will be automatically\n        // applied to each production deployment\n        var exampleProjectDomain = new ProjectDomain(\"exampleProjectDomain\", ProjectDomainArgs.builder()        \n            .projectId(exampleProject.id())\n            .domain(\"i-love.vercel.app\")\n            .build());\n\n        // A redirect of a domain name to a second domain name.\n        // The status_code can optionally be controlled.\n        var exampleRedirect = new ProjectDomain(\"exampleRedirect\", ProjectDomainArgs.builder()        \n            .projectId(exampleProject.id())\n            .domain(\"i-also-love.vercel.app\")\n            .redirect(exampleProjectDomain.domain())\n            .redirectStatusCode(307)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n  # A simple domain that will be automatically\n  # applied to each production deployment\n  exampleProjectDomain:\n    type: vercel:ProjectDomain\n    properties:\n      projectId: ${exampleProject.id}\n      domain: i-love.vercel.app\n  # A redirect of a domain name to a second domain name.\n  # The status_code can optionally be controlled.\n  exampleRedirect:\n    type: vercel:ProjectDomain\n    properties:\n      projectId: ${exampleProject.id}\n      domain: i-also-love.vercel.app\n      redirect: ${exampleProjectDomain.domain}\n      redirectStatusCode: 307\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project ID and domain.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\nAlternatively, you can import via the team_id, project_id and domain name.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\n",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "domain",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectDomain resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain name to associate with the project.\n"
                    },
                    "gitBranch": {
                        "type": "string",
                        "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "redirect": {
                        "type": "string",
                        "description": "The domain name that serves as a target destination for redirects.\n"
                    },
                    "redirectStatusCode": {
                        "type": "integer",
                        "description": "The HTTP status code to use when serving as a redirect.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {gitRepository: {\n    type: \"github\",\n    repo: \"vercel/some-repo\",\n}});\n// An environment variable that will be created\n// for this project for the \"production\" environment.\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", {\n    projectId: exampleProject.id,\n    key: \"foo\",\n    value: \"bar\",\n    targets: [\"production\"],\n});\n// An environment variable that will be created\n// for this project for the \"preview\" environment when the branch is \"staging\".\nconst exampleGitBranch = new vercel.ProjectEnvironmentVariable(\"exampleGitBranch\", {\n    projectId: exampleProject.id,\n    key: \"foo\",\n    value: \"bar-staging\",\n    targets: [\"preview\"],\n    gitBranch: \"staging\",\n});\n// A sensitive environment variable that will be created\n// for this project for the \"production\" environment.\nconst exampleSensitive = new vercel.ProjectEnvironmentVariable(\"exampleSensitive\", {\n    projectId: exampleProject.id,\n    key: \"foo\",\n    value: \"bar-production\",\n    targets: [\"production\"],\n    sensitive: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\", git_repository=vercel.ProjectGitRepositoryArgs(\n    type=\"github\",\n    repo=\"vercel/some-repo\",\n))\n# An environment variable that will be created\n# for this project for the \"production\" environment.\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\",\n    project_id=example_project.id,\n    key=\"foo\",\n    value=\"bar\",\n    targets=[\"production\"])\n# An environment variable that will be created\n# for this project for the \"preview\" environment when the branch is \"staging\".\nexample_git_branch = vercel.ProjectEnvironmentVariable(\"exampleGitBranch\",\n    project_id=example_project.id,\n    key=\"foo\",\n    value=\"bar-staging\",\n    targets=[\"preview\"],\n    git_branch=\"staging\")\n# A sensitive environment variable that will be created\n# for this project for the \"production\" environment.\nexample_sensitive = vercel.ProjectEnvironmentVariable(\"exampleSensitive\",\n    project_id=example_project.id,\n    key=\"foo\",\n    value=\"bar-production\",\n    targets=[\"production\"],\n    sensitive=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\", new()\n    {\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"production\" environment.\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"preview\" environment when the branch is \"staging\".\n    var exampleGitBranch = new Vercel.ProjectEnvironmentVariable(\"exampleGitBranch\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Key = \"foo\",\n        Value = \"bar-staging\",\n        Targets = new[]\n        {\n            \"preview\",\n        },\n        GitBranch = \"staging\",\n    });\n\n    // A sensitive environment variable that will be created\n    // for this project for the \"production\" environment.\n    var exampleSensitive = new Vercel.ProjectEnvironmentVariable(\"exampleSensitive\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Key = \"foo\",\n        Value = \"bar-production\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        Sensitive = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", \u0026vercel.ProjectArgs{\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// An environment variable that will be created\n\t\t// for this project for the \"production\" environment.\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleProjectEnvironmentVariable\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// An environment variable that will be created\n\t\t// for this project for the \"preview\" environment when the branch is \"staging\".\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleGitBranch\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar-staging\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t},\n\t\t\tGitBranch: pulumi.String(\"staging\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A sensitive environment variable that will be created\n\t\t// for this project for the \"production\" environment.\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleSensitive\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar-production\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tSensitive: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // An environment variable that will be created\n        // for this project for the \"production\" environment.\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .targets(\"production\")\n            .build());\n\n        // An environment variable that will be created\n        // for this project for the \"preview\" environment when the branch is \"staging\".\n        var exampleGitBranch = new ProjectEnvironmentVariable(\"exampleGitBranch\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .key(\"foo\")\n            .value(\"bar-staging\")\n            .targets(\"preview\")\n            .gitBranch(\"staging\")\n            .build());\n\n        // A sensitive environment variable that will be created\n        // for this project for the \"production\" environment.\n        var exampleSensitive = new ProjectEnvironmentVariable(\"exampleSensitive\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .key(\"foo\")\n            .value(\"bar-production\")\n            .targets(\"production\")\n            .sensitive(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n    properties:\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # An environment variable that will be created\n  # for this project for the \"production\" environment.\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      key: foo\n      value: bar\n      targets:\n        - production\n  # An environment variable that will be created\n  # for this project for the \"preview\" environment when the branch is \"staging\".\n  exampleGitBranch:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      key: foo\n      value: bar-staging\n      targets:\n        - preview\n      gitBranch: staging\n  # A sensitive environment variable that will be created\n  # for this project for the \"production\" environment.\n  exampleSensitive:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      key: foo\n      value: bar-production\n      targets:\n        - production\n      sensitive: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project_id and environment variable id.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page,\n\nor can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\nAlternatively, you can import via the team_id, project_id and\n\nenvironment variable id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page,\n\nor can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\n",
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "projectId",
                "sensitive",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectId",
                "targets",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironmentVariable resources.\n",
                "properties": {
                    "gitBranch": {
                        "type": "string",
                        "description": "The git branch of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Vercel project.\n"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectFunctionCpu:ProjectFunctionCpu": {
            "description": "Provides a Function CPU resource for a Project.\n\nThis controls the maximum amount of CPU utilization your Serverless Functions can use while executing. Standard is optimal for most frontend workloads. You can override this per function using the vercel.json file.\n\nA new Deployment is required for your changes to take effect.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\nconst exampleProjectFunctionCpu = new vercel.ProjectFunctionCpu(\"exampleProjectFunctionCpu\", {\n    projectId: exampleProject.id,\n    cpu: \"performance\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\")\nexample_project_function_cpu = vercel.ProjectFunctionCpu(\"exampleProjectFunctionCpu\",\n    project_id=example_project.id,\n    cpu=\"performance\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    var exampleProjectFunctionCpu = new Vercel.ProjectFunctionCpu(\"exampleProjectFunctionCpu\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Cpu = \"performance\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectFunctionCpu(ctx, \"exampleProjectFunctionCpu\", \u0026vercel.ProjectFunctionCpuArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tCpu:       pulumi.String(\"performance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectFunctionCpu;\nimport com.pulumi.vercel.ProjectFunctionCpuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleProjectFunctionCpu = new ProjectFunctionCpu(\"exampleProjectFunctionCpu\", ProjectFunctionCpuArgs.builder()        \n            .projectId(exampleProject.id())\n            .cpu(\"performance\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n  exampleProjectFunctionCpu:\n    type: vercel:ProjectFunctionCpu\n    properties:\n      projectId: ${exampleProject.id}\n      cpu: performance\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectFunctionCpu:ProjectFunctionCpu example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "cpu": {
                    "type": "string",
                    "description": "The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to adjust the CPU for.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "cpu",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "cpu": {
                    "type": "string",
                    "description": "The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to adjust the CPU for.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "cpu",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFunctionCpu resources.\n",
                "properties": {
                    "cpu": {
                        "type": "string",
                        "description": "The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to adjust the CPU for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable": {
            "description": "Provides a Shared Environment Variable resource.\n\nA Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {gitRepository: {\n    type: \"github\",\n    repo: \"vercel/some-repo\",\n}});\n// A shared environment variable that will be created\n// and associated with the \"example\" project.\nconst exampleSharedEnvironmentVariable = new vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", {\n    key: \"EXAMPLE\",\n    value: \"some_value\",\n    targets: [\"production\"],\n    projectIds: [exampleProject.id],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\", git_repository=vercel.ProjectGitRepositoryArgs(\n    type=\"github\",\n    repo=\"vercel/some-repo\",\n))\n# A shared environment variable that will be created\n# and associated with the \"example\" project.\nexample_shared_environment_variable = vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\",\n    key=\"EXAMPLE\",\n    value=\"some_value\",\n    targets=[\"production\"],\n    project_ids=[example_project.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\", new()\n    {\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // A shared environment variable that will be created\n    // and associated with the \"example\" project.\n    var exampleSharedEnvironmentVariable = new Vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", new()\n    {\n        Key = \"EXAMPLE\",\n        Value = \"some_value\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        ProjectIds = new[]\n        {\n            exampleProject.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", \u0026vercel.ProjectArgs{\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A shared environment variable that will be created\n\t\t// and associated with the \"example\" project.\n\t\t_, err = vercel.NewSharedEnvironmentVariable(ctx, \"exampleSharedEnvironmentVariable\", \u0026vercel.SharedEnvironmentVariableArgs{\n\t\t\tKey:   pulumi.String(\"EXAMPLE\"),\n\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texampleProject.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.SharedEnvironmentVariable;\nimport com.pulumi.vercel.SharedEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // A shared environment variable that will be created\n        // and associated with the \"example\" project.\n        var exampleSharedEnvironmentVariable = new SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", SharedEnvironmentVariableArgs.builder()        \n            .key(\"EXAMPLE\")\n            .value(\"some_value\")\n            .targets(\"production\")\n            .projectIds(exampleProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n    properties:\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # A shared environment variable that will be created\n  # and associated with the \"example\" project.\n  exampleSharedEnvironmentVariable:\n    type: vercel:SharedEnvironmentVariable\n    properties:\n      key: EXAMPLE\n      value: some_value\n      targets:\n        - production\n      projectIds:\n        - ${exampleProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and environment variable id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page.\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/env_yyyyyyyyyyyyy\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "projectIds",
                "sensitive",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectIds",
                "targets",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedEnvironmentVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID of the Vercel project.\n"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/webhook:Webhook": {
            "description": "A webhook is a trigger-based HTTP endpoint configured to receive HTTP POST requests through events.\n\nWhen an event happens, a webhook is sent to a third-party app, which can then take appropriate action.\n\n\u003e Only Pro and Enterprise teams are able to configure these webhooks at the account level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {});\nconst example2 = new vercel.Project(\"example2\", {});\nconst withProjectIds = new vercel.Webhook(\"withProjectIds\", {\n    events: [\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint: \"https://example.com/endpoint\",\n    projectIds: [\n        example.id,\n        example2.id,\n    ],\n});\nconst withoutProjectIds = new vercel.Webhook(\"withoutProjectIds\", {\n    events: [\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint: \"https://example.com/endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\")\nexample2 = vercel.Project(\"example2\")\nwith_project_ids = vercel.Webhook(\"withProjectIds\",\n    events=[\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint=\"https://example.com/endpoint\",\n    project_ids=[\n        example.id,\n        example2.id,\n    ])\nwithout_project_ids = vercel.Webhook(\"withoutProjectIds\",\n    events=[\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint=\"https://example.com/endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\");\n\n    var example2 = new Vercel.Project(\"example2\");\n\n    var withProjectIds = new Vercel.Webhook(\"withProjectIds\", new()\n    {\n        Events = new[]\n        {\n            \"deployment.created\",\n            \"deployment.succeeded\",\n        },\n        Endpoint = \"https://example.com/endpoint\",\n        ProjectIds = new[]\n        {\n            example.Id,\n            example2.Id,\n        },\n    });\n\n    var withoutProjectIds = new Vercel.Webhook(\"withoutProjectIds\", new()\n    {\n        Events = new[]\n        {\n            \"deployment.created\",\n            \"deployment.succeeded\",\n        },\n        Endpoint = \"https://example.com/endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample2, err := vercel.NewProject(ctx, \"example2\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewWebhook(ctx, \"withProjectIds\", \u0026vercel.WebhookArgs{\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"deployment.created\"),\n\t\t\t\tpulumi.String(\"deployment.succeeded\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/endpoint\"),\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texample.ID(),\n\t\t\t\texample2.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewWebhook(ctx, \"withoutProjectIds\", \u0026vercel.WebhookArgs{\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"deployment.created\"),\n\t\t\t\tpulumi.String(\"deployment.succeeded\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/endpoint\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.Webhook;\nimport com.pulumi.vercel.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\");\n\n        var example2 = new Project(\"example2\");\n\n        var withProjectIds = new Webhook(\"withProjectIds\", WebhookArgs.builder()        \n            .events(            \n                \"deployment.created\",\n                \"deployment.succeeded\")\n            .endpoint(\"https://example.com/endpoint\")\n            .projectIds(            \n                example.id(),\n                example2.id())\n            .build());\n\n        var withoutProjectIds = new Webhook(\"withoutProjectIds\", WebhookArgs.builder()        \n            .events(            \n                \"deployment.created\",\n                \"deployment.succeeded\")\n            .endpoint(\"https://example.com/endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n  example2:\n    type: vercel:Project\n  withProjectIds:\n    type: vercel:Webhook\n    properties:\n      events:\n        - deployment.created\n        - deployment.succeeded\n      endpoint: https://example.com/endpoint\n      projectIds:\n        - ${example.id}\n        - ${example2.id}\n  withoutProjectIds:\n    type: vercel:Webhook\n    properties:\n      events:\n        - deployment.created\n        - deployment.succeeded\n      endpoint: https://example.com/endpoint\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Webhooks events will be sent as POST requests to this URL.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.\n",
                    "secret": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "endpoint",
                "events",
                "secret",
                "teamId"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "Webhooks events will be sent as POST requests to this URL.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "Webhooks events will be sent as POST requests to this URL.\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.\n",
                        "secret": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "vercel:index/getAlias:getAlias": {
            "description": "Provides information about an existing Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlias.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias or Alias ID to be retrieved.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlias.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias or Alias ID to be retrieved.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The ID of the Deployment the Alias is associated with.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "deploymentId",
                    "id",
                    "teamId"
                ]
            }
        },
        "vercel:index/getAttackChallengeMode:getAttackChallengeMode": {
            "description": "Provides an Attack Challenge Mode resource.\n\nAttack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getAttackChallengeMode({\n    projectId: vercel_project.example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_attack_challenge_mode(project_id=vercel_project[\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetAttackChallengeMode.Invoke(new()\n    {\n        ProjectId = vercel_project.Example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupAttackChallengeMode(ctx, \u0026vercel.LookupAttackChallengeModeArgs{\n\t\t\tProjectId: vercel_project.Example.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetAttackChallengeModeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getAttackChallengeMode(GetAttackChallengeModeArgs.builder()\n            .projectId(vercel_project.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getAttackChallengeMode\n      Arguments:\n        projectId: ${vercel_project.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAttackChallengeMode.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to adjust the CPU for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAttackChallengeMode.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether Attack Challenge Mode is enabled or not.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The resource identifier.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to adjust the CPU for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "id",
                    "projectId",
                    "teamId"
                ]
            }
        },
        "vercel:index/getDeployment:getDeployment": {
            "description": "Provides information about an existing Deployment.\n\nA Deployment is the result of building your Project and making it available through a live URL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getDeployment({\n    id: \"https://my-vercel-project.vercel.app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_deployment(id=\"https://my-vercel-project.vercel.app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetDeployment.Invoke(new()\n    {\n        Id = \"https://my-vercel-project.vercel.app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupDeployment(ctx, \u0026vercel.LookupDeploymentArgs{\n\t\t\tId: \"https://my-vercel-project.vercel.app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getDeployment(GetDeploymentArgs.builder()\n            .id(\"https://my-vercel-project.vercel.app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getDeployment\n      Arguments:\n        id: https://my-vercel-project.vercel.app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID or URL of the Deployment to read.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID or URL of the Deployment to read.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch or commit hash that has been deployed. Note this will only work if the project is configured to use a Git repository.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "A unique URL that is automatically generated for a deployment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domains",
                    "id",
                    "production",
                    "projectId",
                    "ref",
                    "teamId",
                    "url"
                ]
            }
        },
        "vercel:index/getEdgeConfig:getEdgeConfig": {
            "description": "Provides information about an existing Edge Config.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getEdgeConfig({\n    id: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_edge_config(id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetEdgeConfig.Invoke(new()\n    {\n        Id = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfig(ctx, \u0026vercel.LookupEdgeConfigArgs{\n\t\t\tId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getEdgeConfig(GetEdgeConfigArgs.builder()\n            .id(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getEdgeConfig\n      Arguments:\n        id: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name/slug of the Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "teamId"
                ]
            }
        },
        "vercel:index/getEdgeConfigSchema:getEdgeConfigSchema": {
            "description": "An Edge Config Schema provides an existing Edge Config with a JSON schema. Use schema protection to prevent unexpected updates that may cause bugs or downtime.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst test = vercel.getEdgeConfigSchema({\n    id: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\ntest = vercel.get_edge_config_schema(id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Vercel.GetEdgeConfigSchema.Invoke(new()\n    {\n        Id = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfigSchema(ctx, \u0026vercel.LookupEdgeConfigSchemaArgs{\n\t\t\tId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = VercelFunctions.getEdgeConfigSchema(GetEdgeConfigSchemaArgs.builder()\n            .id(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: vercel:getEdgeConfigSchema\n      Arguments:\n        id: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfigSchema.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Edge Config that the schema should be for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfigSchema.\n",
                "properties": {
                    "definition": {
                        "type": "string",
                        "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Edge Config that the schema should be for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "definition",
                    "id",
                    "teamId"
                ]
            }
        },
        "vercel:index/getEdgeConfigToken:getEdgeConfigToken": {
            "description": "Provides information about an existing Edge Config Token.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config token is used to authenticate against an Edge Config's endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst test = vercel.getEdgeConfigToken({\n    edgeConfigId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    token: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\ntest = vercel.get_edge_config_token(edge_config_id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    token=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Vercel.GetEdgeConfigToken.Invoke(new()\n    {\n        EdgeConfigId = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        Token = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfigToken(ctx, \u0026vercel.LookupEdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t\tToken:        \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = VercelFunctions.getEdgeConfigToken(GetEdgeConfigTokenArgs.builder()\n            .edgeConfigId(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .token(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: vercel:getEdgeConfigToken\n      Arguments:\n        edgeConfigId: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        token: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfigToken.\n",
                "properties": {
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "edgeConfigId",
                    "token"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfigToken.\n",
                "properties": {
                    "connectionString": {
                        "type": "string",
                        "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n"
                    },
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionString",
                    "edgeConfigId",
                    "id",
                    "label",
                    "teamId",
                    "token"
                ]
            }
        },
        "vercel:index/getEndpointVerification:getEndpointVerification": {
            "description": "Provides a verification code that can be used to prove ownership over an API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getEndpointVerification({});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_endpoint_verification()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetEndpointVerification.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.GetEndpointVerification(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEndpointVerificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getEndpointVerification();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getEndpointVerification\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEndpointVerification.\n",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEndpointVerification.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "verificationCode": {
                        "type": "string",
                        "description": "A verification code that should be set in the `x-vercel-verify` response header for your API. This is used to verify that the endpoint belongs to you.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "teamId",
                    "verificationCode"
                ]
            }
        },
        "vercel:index/getFile:getFile": {
            "description": "Provides information about a file on disk.\n\nThis will read a single file, providing metadata for use with a `vercel.Deployment`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst exampleFile = vercel.getFile({\n    path: \"index.html\",\n});\nconst exampleProject = vercel.getProject({\n    name: \"my-project\",\n});\nconst exampleDeployment = new vercel.Deployment(\"exampleDeployment\", {\n    projectId: exampleProject.then(exampleProject =\u003e exampleProject.id),\n    files: exampleFile.then(exampleFile =\u003e exampleFile.file),\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\nimport pulumiverse_vercel as vercel\n\nexample_file = vercel.get_file(path=\"index.html\")\nexample_project = vercel.get_project(name=\"my-project\")\nexample_deployment = vercel.Deployment(\"exampleDeployment\",\n    project_id=example_project.id,\n    files=example_file.file)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleFile = Vercel.GetFile.Invoke(new()\n    {\n        Path = \"index.html\",\n    });\n\n    var exampleProject = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-project\",\n    });\n\n    var exampleDeployment = new Vercel.Deployment(\"exampleDeployment\", new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Files = exampleFile.Apply(getFileResult =\u003e getFileResult.File),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleFile, err := vercel.GetFile(ctx, \u0026vercel.GetFileArgs{\n\t\t\tPath: \"index.html\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDeployment(ctx, \"exampleDeployment\", \u0026vercel.DeploymentArgs{\n\t\t\tProjectId: pulumi.String(exampleProject.Id),\n\t\t\tFiles:     interface{}(exampleFile.File),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetFileArgs;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.Deployment;\nimport com.pulumi.vercel.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleFile = VercelFunctions.getFile(GetFileArgs.builder()\n            .path(\"index.html\")\n            .build());\n\n        final var exampleProject = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-project\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()        \n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .files(exampleFile.applyValue(getFileResult -\u003e getFileResult.file()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDeployment:\n    type: vercel:Deployment\n    properties:\n      projectId: ${exampleProject.id}\n      files: ${exampleFile.file}\nvariables:\n  exampleFile:\n    fn::invoke:\n      Function: vercel:getFile\n      Arguments:\n        path: index.html\n  exampleProject:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFile.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFile.\n",
                "properties": {
                    "file": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "id",
                    "path"
                ]
            }
        },
        "vercel:index/getLogDrain:getLogDrain": {
            "description": "Provides information about an existing Log Drain.\n\nLog Drains collect all of your logs using a service specializing in storing app logs.\n\nTeams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getLogDrain({\n    id: \"lg_xxxxxxx_xxxxxx_xxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_log_drain(id=\"lg_xxxxxxx_xxxxxx_xxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetLogDrain.Invoke(new()\n    {\n        Id = \"lg_xxxxxxx_xxxxxx_xxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupLogDrain(ctx, \u0026vercel.LookupLogDrainArgs{\n\t\t\tId: \"lg_xxxxxxx_xxxxxx_xxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetLogDrainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getLogDrain(GetLogDrainArgs.builder()\n            .id(\"lg_xxxxxxx_xxxxxx_xxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getLogDrain\n      Arguments:\n        id: lg_xxxxxxx_xxxxxx_xxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLogDrain.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Log Drain.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLogDrain.\n",
                "properties": {
                    "deliveryFormat": {
                        "type": "string",
                        "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom headers to include in requests to the log drain endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Log Drain.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                    },
                    "samplingRate": {
                        "type": "number",
                        "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `function`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deliveryFormat",
                    "endpoint",
                    "environments",
                    "headers",
                    "id",
                    "projectIds",
                    "samplingRate",
                    "sources",
                    "teamId"
                ]
            }
        },
        "vercel:index/getPrebuiltProject:getPrebuiltProject": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrebuiltProject.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrebuiltProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "output": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of output file to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "output",
                    "path"
                ]
            }
        },
        "vercel:index/getProject:getProject": {
            "description": "Provides information about an existing project within Vercel.\n\nA Project groups deployments and custom domains. To deploy on Vercel, you need a Project.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst foo = vercel.getProject({\n    name: \"my-existing-project\",\n});\nexport const projectId = foo.then(foo =\u003e foo.id);\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nfoo = vercel.get_project(name=\"my-existing-project\")\npulumi.export(\"projectId\", foo.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-existing-project\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = foo.Apply(getProjectResult =\u003e getProjectResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-existing-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectId\", foo.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-existing-project\")\n            .build());\n\n        ctx.export(\"projectId\", foo.applyValue(getProjectResult -\u003e getProjectResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-existing-project\noutputs:\n  # Outputs prj_xxxxxx\n  projectId: ${foo.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "autoAssignCustomDomains": {
                        "type": "boolean",
                        "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                    },
                    "automaticallyExposeSystemEnvironmentVariables": {
                        "type": "boolean",
                        "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                    },
                    "buildCommand": {
                        "type": "string",
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "customerSuccessCodeVisibility": {
                        "type": "boolean",
                        "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                    },
                    "devCommand": {
                        "type": "string",
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "directoryListing": {
                        "type": "boolean",
                        "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/getProjectEnvironment:getProjectEnvironment"
                        },
                        "description": "A list of environment variables that should be configured for the project.\n"
                    },
                    "framework": {
                        "type": "string",
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                    },
                    "functionFailover": {
                        "type": "boolean",
                        "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                    },
                    "gitComments": {
                        "$ref": "#/types/vercel:index/getProjectGitComments:getProjectGitComments",
                        "description": "Configuration for Git Comments.\n"
                    },
                    "gitForkProtection": {
                        "type": "boolean",
                        "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json.\n"
                    },
                    "gitLfs": {
                        "type": "boolean",
                        "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/getProjectGitRepository:getProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreCommand": {
                        "type": "string",
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "outputDirectory": {
                        "type": "string",
                        "description": "The output directory of the project. When null is used this value will be automatically detected.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/getProjectPasswordProtection:getProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "previewComments": {
                        "type": "boolean",
                        "description": "Whether comments are enabled on your Preview Deployments.\n"
                    },
                    "prioritiseProductionBuilds": {
                        "type": "boolean",
                        "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                    },
                    "protectionBypassForAutomation": {
                        "type": "boolean",
                        "description": "Allows automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass`.\n"
                    },
                    "publicSource": {
                        "type": "boolean",
                        "description": "Specifies whether the source code and logs of the deployments for this project should be public or not.\n"
                    },
                    "rootDirectory": {
                        "type": "string",
                        "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n"
                    },
                    "serverlessFunctionRegion": {
                        "type": "string",
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                    },
                    "skewProtection": {
                        "type": "string",
                        "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "trustedIps": {
                        "$ref": "#/types/vercel:index/getProjectTrustedIps:getProjectTrustedIps",
                        "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoAssignCustomDomains",
                    "automaticallyExposeSystemEnvironmentVariables",
                    "buildCommand",
                    "customerSuccessCodeVisibility",
                    "devCommand",
                    "directoryListing",
                    "environments",
                    "framework",
                    "functionFailover",
                    "gitComments",
                    "gitForkProtection",
                    "gitLfs",
                    "gitRepository",
                    "id",
                    "ignoreCommand",
                    "installCommand",
                    "name",
                    "outputDirectory",
                    "passwordProtection",
                    "previewComments",
                    "prioritiseProductionBuilds",
                    "protectionBypassForAutomation",
                    "publicSource",
                    "rootDirectory",
                    "serverlessFunctionRegion",
                    "skewProtection",
                    "teamId",
                    "trustedIps",
                    "vercelAuthentication"
                ]
            }
        },
        "vercel:index/getProjectDirectory:getProjectDirectory": {
            "inputs": {
                "description": "A collection of arguments for invoking getProjectDirectory.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectDirectory.\n",
                "properties": {
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "files",
                    "id",
                    "path"
                ]
            }
        },
        "vercel:index/getProjectFunctionCpu:getProjectFunctionCpu": {
            "description": "Provides information about a Project's Function CPU setting.\n\nThis controls the maximum amount of CPU utilization your Serverless Functions can use while executing. Standard is optimal for most frontend workloads. You can override this per function using the vercel.json file.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst exampleProject = vercel.getProject({\n    name: \"example\",\n});\nconst exampleProjectFunctionCpu = exampleProject.then(exampleProject =\u003e vercel.getProjectFunctionCpu({\n    projectId: exampleProject.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample_project = vercel.get_project(name=\"example\")\nexample_project_function_cpu = vercel.get_project_function_cpu(project_id=example_project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleProjectFunctionCpu = Vercel.GetProjectFunctionCpu.Invoke(new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupProjectFunctionCpu(ctx, \u0026vercel.LookupProjectFunctionCpuArgs{\n\t\t\tProjectId: exampleProject.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.inputs.GetProjectFunctionCpuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"example\")\n            .build());\n\n        final var exampleProjectFunctionCpu = VercelFunctions.getProjectFunctionCpu(GetProjectFunctionCpuArgs.builder()\n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: example\n  exampleProjectFunctionCpu:\n    fn::invoke:\n      Function: vercel:getProjectFunctionCpu\n      Arguments:\n        projectId: ${exampleProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectFunctionCpu.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to read the Function CPU setting for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectFunctionCpu.\n",
                "properties": {
                    "cpu": {
                        "type": "string",
                        "description": "The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the resource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to read the Function CPU setting for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpu",
                    "id",
                    "projectId",
                    "teamId"
                ]
            }
        },
        "vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable": {
            "description": "Provides information about an existing Shared Environment Variable within Vercel.\n\nA Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getSharedEnvironmentVariable({\n    id: \"xxxxxxxxxxxxxxx\",\n});\nconst exampleByKeyAndTarget = vercel.getSharedEnvironmentVariable({\n    key: \"MY_ENV_VAR\",\n    targets: [\n        \"production\",\n        \"preview\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_shared_environment_variable(id=\"xxxxxxxxxxxxxxx\")\nexample_by_key_and_target = vercel.get_shared_environment_variable(key=\"MY_ENV_VAR\",\n    targets=[\n        \"production\",\n        \"preview\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetSharedEnvironmentVariable.Invoke(new()\n    {\n        Id = \"xxxxxxxxxxxxxxx\",\n    });\n\n    var exampleByKeyAndTarget = Vercel.GetSharedEnvironmentVariable.Invoke(new()\n    {\n        Key = \"MY_ENV_VAR\",\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupSharedEnvironmentVariable(ctx, \u0026vercel.LookupSharedEnvironmentVariableArgs{\n\t\t\tId: pulumi.StringRef(\"xxxxxxxxxxxxxxx\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupSharedEnvironmentVariable(ctx, \u0026vercel.LookupSharedEnvironmentVariableArgs{\n\t\t\tKey: pulumi.StringRef(\"MY_ENV_VAR\"),\n\t\t\tTargets: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"preview\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetSharedEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getSharedEnvironmentVariable(GetSharedEnvironmentVariableArgs.builder()\n            .id(\"xxxxxxxxxxxxxxx\")\n            .build());\n\n        final var exampleByKeyAndTarget = VercelFunctions.getSharedEnvironmentVariable(GetSharedEnvironmentVariableArgs.builder()\n            .key(\"MY_ENV_VAR\")\n            .targets(            \n                \"production\",\n                \"preview\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getSharedEnvironmentVariable\n      Arguments:\n        id: xxxxxxxxxxxxxxx\n  exampleByKeyAndTarget:\n    fn::invoke:\n      Function: vercel:getSharedEnvironmentVariable\n      Arguments:\n        key: MY_ENV_VAR\n        targets:\n          - production\n          - preview\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSharedEnvironmentVariable.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSharedEnvironmentVariable.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID of the Vercel project.\n"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Whether the Environment Variable is sensitive or not.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "key",
                    "projectIds",
                    "sensitive",
                    "targets",
                    "teamId",
                    "value"
                ]
            }
        }
    }
}