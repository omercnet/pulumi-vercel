// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetPrebuiltProject
    {
        public static Task<GetPrebuiltProjectResult> InvokeAsync(GetPrebuiltProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrebuiltProjectResult>("vercel:index/getPrebuiltProject:getPrebuiltProject", args ?? new GetPrebuiltProjectArgs(), options.WithDefaults());

        public static Output<GetPrebuiltProjectResult> Invoke(GetPrebuiltProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrebuiltProjectResult>("vercel:index/getPrebuiltProject:getPrebuiltProject", args ?? new GetPrebuiltProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrebuiltProjectArgs : global::Pulumi.InvokeArgs
    {
        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        public GetPrebuiltProjectArgs()
        {
        }
        public static new GetPrebuiltProjectArgs Empty => new GetPrebuiltProjectArgs();
    }

    public sealed class GetPrebuiltProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public GetPrebuiltProjectInvokeArgs()
        {
        }
        public static new GetPrebuiltProjectInvokeArgs Empty => new GetPrebuiltProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrebuiltProjectResult
    {
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Output;
        public readonly string Path;

        [OutputConstructor]
        private GetPrebuiltProjectResult(
            string id,

            ImmutableDictionary<string, string> output,

            string path)
        {
            Id = id;
            Output = output;
            Path = path;
        }
    }
}
