// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

// Provides information about an existing project within Vercel.
//
// A Project groups deployments and custom domains. To deploy on Vercel, you need a Project.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "my-existing-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("projectId", foo.Id)
//			return nil
//		})
//	}
//
// ```
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("vercel:index/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// The name of the project.
	Name string `pulumi:"name"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection *GetProjectPasswordProtection `pulumi:"passwordProtection"`
	// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand string `pulumi:"buildCommand"`
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand string `pulumi:"devCommand"`
	// A list of environment variables that should be configured for the project.
	Environments []GetProjectEnvironment `pulumi:"environments"`
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework string `pulumi:"framework"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository GetProjectGitRepository `pulumi:"gitRepository"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand string `pulumi:"ignoreCommand"`
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand string `pulumi:"installCommand"`
	// The name of the project.
	Name string `pulumi:"name"`
	// The output directory of the project. When null is used this value will be automatically detected.
	OutputDirectory string `pulumi:"outputDirectory"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection *GetProjectPasswordProtection `pulumi:"passwordProtection"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not.
	PublicSource bool `pulumi:"publicSource"`
	// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
	RootDirectory string `pulumi:"rootDirectory"`
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion string `pulumi:"serverlessFunctionRegion"`
	// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication GetProjectVercelAuthentication `pulumi:"vercelAuthentication"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectResult, error) {
			args := v.(LookupProjectArgs)
			r, err := LookupProject(ctx, &args, opts...)
			var s LookupProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection GetProjectPasswordProtectionPtrInput `pulumi:"passwordProtection"`
	// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupProjectResult] {
	return pulumix.Output[LookupProjectResult]{
		OutputState: o.OutputState,
	}
}

// The build command for this project. If omitted, this value will be automatically detected.
func (o LookupProjectResultOutput) BuildCommand() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.BuildCommand }).(pulumi.StringOutput)
}

// The dev command for this project. If omitted, this value will be automatically detected.
func (o LookupProjectResultOutput) DevCommand() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.DevCommand }).(pulumi.StringOutput)
}

// A list of environment variables that should be configured for the project.
func (o LookupProjectResultOutput) Environments() GetProjectEnvironmentArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectEnvironment { return v.Environments }).(GetProjectEnvironmentArrayOutput)
}

// The framework that is being used for this project. If omitted, no framework is selected.
func (o LookupProjectResultOutput) Framework() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Framework }).(pulumi.StringOutput)
}

// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
func (o LookupProjectResultOutput) GitRepository() GetProjectGitRepositoryOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectGitRepository { return v.GitRepository }).(GetProjectGitRepositoryOutput)
}

// The ID of this resource.
func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
func (o LookupProjectResultOutput) IgnoreCommand() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.IgnoreCommand }).(pulumi.StringOutput)
}

// The install command for this project. If omitted, this value will be automatically detected.
func (o LookupProjectResultOutput) InstallCommand() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.InstallCommand }).(pulumi.StringOutput)
}

// The name of the project.
func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// The output directory of the project. When null is used this value will be automatically detected.
func (o LookupProjectResultOutput) OutputDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.OutputDirectory }).(pulumi.StringOutput)
}

// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
func (o LookupProjectResultOutput) PasswordProtection() GetProjectPasswordProtectionPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *GetProjectPasswordProtection { return v.PasswordProtection }).(GetProjectPasswordProtectionPtrOutput)
}

// Specifies whether the source code and logs of the deployments for this project should be public or not.
func (o LookupProjectResultOutput) PublicSource() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.PublicSource }).(pulumi.BoolOutput)
}

// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
func (o LookupProjectResultOutput) RootDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.RootDirectory }).(pulumi.StringOutput)
}

// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
func (o LookupProjectResultOutput) ServerlessFunctionRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.ServerlessFunctionRegion }).(pulumi.StringOutput)
}

// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupProjectResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.TeamId }).(pulumi.StringOutput)
}

// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
func (o LookupProjectResultOutput) VercelAuthentication() GetProjectVercelAuthenticationOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectVercelAuthentication { return v.VercelAuthentication }).(GetProjectVercelAuthenticationOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
