// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetProject
    {
        /// <summary>
        /// Provides information about an existing project within Vercel.
        /// 
        /// A Project groups deployments and custom domains. To deploy on Vercel, you need a Project.
        /// 
        /// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Vercel.GetProject.Invoke(new()
        ///     {
        ///         Name = "my-existing-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectId"] = foo.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("vercel:index/getProject:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an existing project within Vercel.
        /// 
        /// A Project groups deployments and custom domains. To deploy on Vercel, you need a Project.
        /// 
        /// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Vercel.GetProject.Invoke(new()
        ///     {
        ///         Name = "my-existing-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectId"] = foo.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectResult>("vercel:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
        /// </summary>
        [Input("passwordProtection")]
        public Inputs.GetProjectPasswordProtectionArgs? PasswordProtection { get; set; }

        /// <summary>
        /// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetProjectArgs()
        {
        }
        public static new GetProjectArgs Empty => new GetProjectArgs();
    }

    public sealed class GetProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
        /// </summary>
        [Input("passwordProtection")]
        public Input<Inputs.GetProjectPasswordProtectionInputArgs>? PasswordProtection { get; set; }

        /// <summary>
        /// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetProjectInvokeArgs()
        {
        }
        public static new GetProjectInvokeArgs Empty => new GetProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        /// <summary>
        /// The build command for this project. If omitted, this value will be automatically detected.
        /// </summary>
        public readonly string BuildCommand;
        /// <summary>
        /// The dev command for this project. If omitted, this value will be automatically detected.
        /// </summary>
        public readonly string DevCommand;
        /// <summary>
        /// A list of environment variables that should be configured for the project.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectEnvironmentResult> Environments;
        /// <summary>
        /// The framework that is being used for this project. If omitted, no framework is selected.
        /// </summary>
        public readonly string Framework;
        /// <summary>
        /// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
        /// </summary>
        public readonly Outputs.GetProjectGitRepositoryResult GitRepository;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
        /// </summary>
        public readonly string IgnoreCommand;
        /// <summary>
        /// The install command for this project. If omitted, this value will be automatically detected.
        /// </summary>
        public readonly string InstallCommand;
        /// <summary>
        /// The name of the project.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The output directory of the project. When null is used this value will be automatically detected.
        /// </summary>
        public readonly string OutputDirectory;
        /// <summary>
        /// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
        /// </summary>
        public readonly Outputs.GetProjectPasswordProtectionResult? PasswordProtection;
        /// <summary>
        /// Specifies whether the source code and logs of the deployments for this project should be public or not.
        /// </summary>
        public readonly bool PublicSource;
        /// <summary>
        /// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
        /// </summary>
        public readonly string RootDirectory;
        /// <summary>
        /// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
        /// </summary>
        public readonly string ServerlessFunctionRegion;
        /// <summary>
        /// The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        public readonly string TeamId;
        /// <summary>
        /// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
        /// </summary>
        public readonly Outputs.GetProjectVercelAuthenticationResult VercelAuthentication;

        [OutputConstructor]
        private GetProjectResult(
            string buildCommand,

            string devCommand,

            ImmutableArray<Outputs.GetProjectEnvironmentResult> environments,

            string framework,

            Outputs.GetProjectGitRepositoryResult gitRepository,

            string id,

            string ignoreCommand,

            string installCommand,

            string name,

            string outputDirectory,

            Outputs.GetProjectPasswordProtectionResult? passwordProtection,

            bool publicSource,

            string rootDirectory,

            string serverlessFunctionRegion,

            string teamId,

            Outputs.GetProjectVercelAuthenticationResult vercelAuthentication)
        {
            BuildCommand = buildCommand;
            DevCommand = devCommand;
            Environments = environments;
            Framework = framework;
            GitRepository = gitRepository;
            Id = id;
            IgnoreCommand = ignoreCommand;
            InstallCommand = installCommand;
            Name = name;
            OutputDirectory = outputDirectory;
            PasswordProtection = passwordProtection;
            PublicSource = publicSource;
            RootDirectory = rootDirectory;
            ServerlessFunctionRegion = serverlessFunctionRegion;
            TeamId = teamId;
            VercelAuthentication = vercelAuthentication;
        }
    }
}
