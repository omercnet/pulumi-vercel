// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

func LookupTeamMember(ctx *pulumi.Context, args *LookupTeamMemberArgs, opts ...pulumi.InvokeOption) (*LookupTeamMemberResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamMemberResult
	err := ctx.Invoke("vercel:index/getTeamMember:getTeamMember", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeamMember.
type LookupTeamMemberArgs struct {
	TeamId string `pulumi:"teamId"`
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getTeamMember.
type LookupTeamMemberResult struct {
	AccessGroups []string               `pulumi:"accessGroups"`
	Id           string                 `pulumi:"id"`
	Projects     []GetTeamMemberProject `pulumi:"projects"`
	Role         string                 `pulumi:"role"`
	TeamId       string                 `pulumi:"teamId"`
	UserId       string                 `pulumi:"userId"`
}

func LookupTeamMemberOutput(ctx *pulumi.Context, args LookupTeamMemberOutputArgs, opts ...pulumi.InvokeOption) LookupTeamMemberResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamMemberResultOutput, error) {
			args := v.(LookupTeamMemberArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTeamMemberResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getTeamMember:getTeamMember", args, &rv, "", opts...)
			if err != nil {
				return LookupTeamMemberResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTeamMemberResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTeamMemberResultOutput), nil
			}
			return output, nil
		}).(LookupTeamMemberResultOutput)
}

// A collection of arguments for invoking getTeamMember.
type LookupTeamMemberOutputArgs struct {
	TeamId pulumi.StringInput `pulumi:"teamId"`
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupTeamMemberOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamMemberArgs)(nil)).Elem()
}

// A collection of values returned by getTeamMember.
type LookupTeamMemberResultOutput struct{ *pulumi.OutputState }

func (LookupTeamMemberResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamMemberResult)(nil)).Elem()
}

func (o LookupTeamMemberResultOutput) ToLookupTeamMemberResultOutput() LookupTeamMemberResultOutput {
	return o
}

func (o LookupTeamMemberResultOutput) ToLookupTeamMemberResultOutputWithContext(ctx context.Context) LookupTeamMemberResultOutput {
	return o
}

func (o LookupTeamMemberResultOutput) AccessGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) []string { return v.AccessGroups }).(pulumi.StringArrayOutput)
}

func (o LookupTeamMemberResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTeamMemberResultOutput) Projects() GetTeamMemberProjectArrayOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) []GetTeamMemberProject { return v.Projects }).(GetTeamMemberProjectArrayOutput)
}

func (o LookupTeamMemberResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) string { return v.Role }).(pulumi.StringOutput)
}

func (o LookupTeamMemberResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func (o LookupTeamMemberResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamMemberResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamMemberResultOutput{})
}
