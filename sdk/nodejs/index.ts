// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetPrebuiltProjectArgs, GetPrebuiltProjectResult, GetPrebuiltProjectOutputArgs } from "./getPrebuiltProject";
export const getPrebuiltProject: typeof import("./getPrebuiltProject").getPrebuiltProject = null as any;
export const getPrebuiltProjectOutput: typeof import("./getPrebuiltProject").getPrebuiltProjectOutput = null as any;
utilities.lazyLoad(exports, ["getPrebuiltProject","getPrebuiltProjectOutput"], () => require("./getPrebuiltProject"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectDirectoryArgs, GetProjectDirectoryResult, GetProjectDirectoryOutputArgs } from "./getProjectDirectory";
export const getProjectDirectory: typeof import("./getProjectDirectory").getProjectDirectory = null as any;
export const getProjectDirectoryOutput: typeof import("./getProjectDirectory").getProjectDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getProjectDirectory","getProjectDirectoryOutput"], () => require("./getProjectDirectory"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectDomainArgs, ProjectDomainState } from "./projectDomain";
export type ProjectDomain = import("./projectDomain").ProjectDomain;
export const ProjectDomain: typeof import("./projectDomain").ProjectDomain = null as any;
utilities.lazyLoad(exports, ["ProjectDomain"], () => require("./projectDomain"));

export { ProjectEnvironmentVariableArgs, ProjectEnvironmentVariableState } from "./projectEnvironmentVariable";
export type ProjectEnvironmentVariable = import("./projectEnvironmentVariable").ProjectEnvironmentVariable;
export const ProjectEnvironmentVariable: typeof import("./projectEnvironmentVariable").ProjectEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentVariable"], () => require("./projectEnvironmentVariable"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SharedEnvironmentVariableArgs, SharedEnvironmentVariableState } from "./sharedEnvironmentVariable";
export type SharedEnvironmentVariable = import("./sharedEnvironmentVariable").SharedEnvironmentVariable;
export const SharedEnvironmentVariable: typeof import("./sharedEnvironmentVariable").SharedEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["SharedEnvironmentVariable"], () => require("./sharedEnvironmentVariable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vercel:index/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "vercel:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "vercel:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "vercel:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "vercel:index/projectDomain:ProjectDomain":
                return new ProjectDomain(name, <any>undefined, { urn })
            case "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable":
                return new ProjectEnvironmentVariable(name, <any>undefined, { urn })
            case "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable":
                return new SharedEnvironmentVariable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vercel", "index/alias", _module)
pulumi.runtime.registerResourceModule("vercel", "index/deployment", _module)
pulumi.runtime.registerResourceModule("vercel", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("vercel", "index/project", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectDomain", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("vercel", "index/sharedEnvironmentVariable", _module)
pulumi.runtime.registerResourcePackage("vercel", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vercel") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
