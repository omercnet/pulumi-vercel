// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

var _ = internal.GetEnvOrDefault

type DeploymentProjectSettings struct {
	// The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.
	BuildCommand *string `pulumi:"buildCommand"`
	// The framework that is being used for this deployment. If omitted, no framework is selected.
	Framework *string `pulumi:"framework"`
	// The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.
	InstallCommand *string `pulumi:"installCommand"`
	// The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.
	OutputDirectory *string `pulumi:"outputDirectory"`
	// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
	RootDirectory *string `pulumi:"rootDirectory"`
}

// DeploymentProjectSettingsInput is an input type that accepts DeploymentProjectSettingsArgs and DeploymentProjectSettingsOutput values.
// You can construct a concrete instance of `DeploymentProjectSettingsInput` via:
//
//	DeploymentProjectSettingsArgs{...}
type DeploymentProjectSettingsInput interface {
	pulumi.Input

	ToDeploymentProjectSettingsOutput() DeploymentProjectSettingsOutput
	ToDeploymentProjectSettingsOutputWithContext(context.Context) DeploymentProjectSettingsOutput
}

type DeploymentProjectSettingsArgs struct {
	// The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The framework that is being used for this deployment. If omitted, no framework is selected.
	Framework pulumi.StringPtrInput `pulumi:"framework"`
	// The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.
	InstallCommand pulumi.StringPtrInput `pulumi:"installCommand"`
	// The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.
	OutputDirectory pulumi.StringPtrInput `pulumi:"outputDirectory"`
	// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
	RootDirectory pulumi.StringPtrInput `pulumi:"rootDirectory"`
}

func (DeploymentProjectSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentProjectSettings)(nil)).Elem()
}

func (i DeploymentProjectSettingsArgs) ToDeploymentProjectSettingsOutput() DeploymentProjectSettingsOutput {
	return i.ToDeploymentProjectSettingsOutputWithContext(context.Background())
}

func (i DeploymentProjectSettingsArgs) ToDeploymentProjectSettingsOutputWithContext(ctx context.Context) DeploymentProjectSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentProjectSettingsOutput)
}

func (i DeploymentProjectSettingsArgs) ToDeploymentProjectSettingsPtrOutput() DeploymentProjectSettingsPtrOutput {
	return i.ToDeploymentProjectSettingsPtrOutputWithContext(context.Background())
}

func (i DeploymentProjectSettingsArgs) ToDeploymentProjectSettingsPtrOutputWithContext(ctx context.Context) DeploymentProjectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentProjectSettingsOutput).ToDeploymentProjectSettingsPtrOutputWithContext(ctx)
}

// DeploymentProjectSettingsPtrInput is an input type that accepts DeploymentProjectSettingsArgs, DeploymentProjectSettingsPtr and DeploymentProjectSettingsPtrOutput values.
// You can construct a concrete instance of `DeploymentProjectSettingsPtrInput` via:
//
//	        DeploymentProjectSettingsArgs{...}
//
//	or:
//
//	        nil
type DeploymentProjectSettingsPtrInput interface {
	pulumi.Input

	ToDeploymentProjectSettingsPtrOutput() DeploymentProjectSettingsPtrOutput
	ToDeploymentProjectSettingsPtrOutputWithContext(context.Context) DeploymentProjectSettingsPtrOutput
}

type deploymentProjectSettingsPtrType DeploymentProjectSettingsArgs

func DeploymentProjectSettingsPtr(v *DeploymentProjectSettingsArgs) DeploymentProjectSettingsPtrInput {
	return (*deploymentProjectSettingsPtrType)(v)
}

func (*deploymentProjectSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentProjectSettings)(nil)).Elem()
}

func (i *deploymentProjectSettingsPtrType) ToDeploymentProjectSettingsPtrOutput() DeploymentProjectSettingsPtrOutput {
	return i.ToDeploymentProjectSettingsPtrOutputWithContext(context.Background())
}

func (i *deploymentProjectSettingsPtrType) ToDeploymentProjectSettingsPtrOutputWithContext(ctx context.Context) DeploymentProjectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentProjectSettingsPtrOutput)
}

type DeploymentProjectSettingsOutput struct{ *pulumi.OutputState }

func (DeploymentProjectSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentProjectSettings)(nil)).Elem()
}

func (o DeploymentProjectSettingsOutput) ToDeploymentProjectSettingsOutput() DeploymentProjectSettingsOutput {
	return o
}

func (o DeploymentProjectSettingsOutput) ToDeploymentProjectSettingsOutputWithContext(ctx context.Context) DeploymentProjectSettingsOutput {
	return o
}

func (o DeploymentProjectSettingsOutput) ToDeploymentProjectSettingsPtrOutput() DeploymentProjectSettingsPtrOutput {
	return o.ToDeploymentProjectSettingsPtrOutputWithContext(context.Background())
}

func (o DeploymentProjectSettingsOutput) ToDeploymentProjectSettingsPtrOutputWithContext(ctx context.Context) DeploymentProjectSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentProjectSettings) *DeploymentProjectSettings {
		return &v
	}).(DeploymentProjectSettingsPtrOutput)
}

// The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentProjectSettings) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The framework that is being used for this deployment. If omitted, no framework is selected.
func (o DeploymentProjectSettingsOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentProjectSettings) *string { return v.Framework }).(pulumi.StringPtrOutput)
}

// The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsOutput) InstallCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentProjectSettings) *string { return v.InstallCommand }).(pulumi.StringPtrOutput)
}

// The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsOutput) OutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentProjectSettings) *string { return v.OutputDirectory }).(pulumi.StringPtrOutput)
}

// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
func (o DeploymentProjectSettingsOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentProjectSettings) *string { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

type DeploymentProjectSettingsPtrOutput struct{ *pulumi.OutputState }

func (DeploymentProjectSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentProjectSettings)(nil)).Elem()
}

func (o DeploymentProjectSettingsPtrOutput) ToDeploymentProjectSettingsPtrOutput() DeploymentProjectSettingsPtrOutput {
	return o
}

func (o DeploymentProjectSettingsPtrOutput) ToDeploymentProjectSettingsPtrOutputWithContext(ctx context.Context) DeploymentProjectSettingsPtrOutput {
	return o
}

func (o DeploymentProjectSettingsPtrOutput) Elem() DeploymentProjectSettingsOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) DeploymentProjectSettings {
		if v != nil {
			return *v
		}
		var ret DeploymentProjectSettings
		return ret
	}).(DeploymentProjectSettingsOutput)
}

// The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsPtrOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.BuildCommand
	}).(pulumi.StringPtrOutput)
}

// The framework that is being used for this deployment. If omitted, no framework is selected.
func (o DeploymentProjectSettingsPtrOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.Framework
	}).(pulumi.StringPtrOutput)
}

// The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsPtrOutput) InstallCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.InstallCommand
	}).(pulumi.StringPtrOutput)
}

// The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.
func (o DeploymentProjectSettingsPtrOutput) OutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.OutputDirectory
	}).(pulumi.StringPtrOutput)
}

// The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.
func (o DeploymentProjectSettingsPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

type DnsRecordSrv struct {
	// The TCP or UDP port on which the service is to be found.
	Port int `pulumi:"port"`
	// The priority of the target host, lower value means more preferred.
	Priority int `pulumi:"priority"`
	// The canonical hostname of the machine providing the service, ending in a dot.
	Target string `pulumi:"target"`
	// A relative weight for records with the same priority, higher value means higher chance of getting picked.
	Weight int `pulumi:"weight"`
}

// DnsRecordSrvInput is an input type that accepts DnsRecordSrvArgs and DnsRecordSrvOutput values.
// You can construct a concrete instance of `DnsRecordSrvInput` via:
//
//	DnsRecordSrvArgs{...}
type DnsRecordSrvInput interface {
	pulumi.Input

	ToDnsRecordSrvOutput() DnsRecordSrvOutput
	ToDnsRecordSrvOutputWithContext(context.Context) DnsRecordSrvOutput
}

type DnsRecordSrvArgs struct {
	// The TCP or UDP port on which the service is to be found.
	Port pulumi.IntInput `pulumi:"port"`
	// The priority of the target host, lower value means more preferred.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The canonical hostname of the machine providing the service, ending in a dot.
	Target pulumi.StringInput `pulumi:"target"`
	// A relative weight for records with the same priority, higher value means higher chance of getting picked.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (DnsRecordSrvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsRecordSrv)(nil)).Elem()
}

func (i DnsRecordSrvArgs) ToDnsRecordSrvOutput() DnsRecordSrvOutput {
	return i.ToDnsRecordSrvOutputWithContext(context.Background())
}

func (i DnsRecordSrvArgs) ToDnsRecordSrvOutputWithContext(ctx context.Context) DnsRecordSrvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordSrvOutput)
}

func (i DnsRecordSrvArgs) ToDnsRecordSrvPtrOutput() DnsRecordSrvPtrOutput {
	return i.ToDnsRecordSrvPtrOutputWithContext(context.Background())
}

func (i DnsRecordSrvArgs) ToDnsRecordSrvPtrOutputWithContext(ctx context.Context) DnsRecordSrvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordSrvOutput).ToDnsRecordSrvPtrOutputWithContext(ctx)
}

// DnsRecordSrvPtrInput is an input type that accepts DnsRecordSrvArgs, DnsRecordSrvPtr and DnsRecordSrvPtrOutput values.
// You can construct a concrete instance of `DnsRecordSrvPtrInput` via:
//
//	        DnsRecordSrvArgs{...}
//
//	or:
//
//	        nil
type DnsRecordSrvPtrInput interface {
	pulumi.Input

	ToDnsRecordSrvPtrOutput() DnsRecordSrvPtrOutput
	ToDnsRecordSrvPtrOutputWithContext(context.Context) DnsRecordSrvPtrOutput
}

type dnsRecordSrvPtrType DnsRecordSrvArgs

func DnsRecordSrvPtr(v *DnsRecordSrvArgs) DnsRecordSrvPtrInput {
	return (*dnsRecordSrvPtrType)(v)
}

func (*dnsRecordSrvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordSrv)(nil)).Elem()
}

func (i *dnsRecordSrvPtrType) ToDnsRecordSrvPtrOutput() DnsRecordSrvPtrOutput {
	return i.ToDnsRecordSrvPtrOutputWithContext(context.Background())
}

func (i *dnsRecordSrvPtrType) ToDnsRecordSrvPtrOutputWithContext(ctx context.Context) DnsRecordSrvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordSrvPtrOutput)
}

type DnsRecordSrvOutput struct{ *pulumi.OutputState }

func (DnsRecordSrvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsRecordSrv)(nil)).Elem()
}

func (o DnsRecordSrvOutput) ToDnsRecordSrvOutput() DnsRecordSrvOutput {
	return o
}

func (o DnsRecordSrvOutput) ToDnsRecordSrvOutputWithContext(ctx context.Context) DnsRecordSrvOutput {
	return o
}

func (o DnsRecordSrvOutput) ToDnsRecordSrvPtrOutput() DnsRecordSrvPtrOutput {
	return o.ToDnsRecordSrvPtrOutputWithContext(context.Background())
}

func (o DnsRecordSrvOutput) ToDnsRecordSrvPtrOutputWithContext(ctx context.Context) DnsRecordSrvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsRecordSrv) *DnsRecordSrv {
		return &v
	}).(DnsRecordSrvPtrOutput)
}

// The TCP or UDP port on which the service is to be found.
func (o DnsRecordSrvOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DnsRecordSrv) int { return v.Port }).(pulumi.IntOutput)
}

// The priority of the target host, lower value means more preferred.
func (o DnsRecordSrvOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v DnsRecordSrv) int { return v.Priority }).(pulumi.IntOutput)
}

// The canonical hostname of the machine providing the service, ending in a dot.
func (o DnsRecordSrvOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v DnsRecordSrv) string { return v.Target }).(pulumi.StringOutput)
}

// A relative weight for records with the same priority, higher value means higher chance of getting picked.
func (o DnsRecordSrvOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v DnsRecordSrv) int { return v.Weight }).(pulumi.IntOutput)
}

type DnsRecordSrvPtrOutput struct{ *pulumi.OutputState }

func (DnsRecordSrvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordSrv)(nil)).Elem()
}

func (o DnsRecordSrvPtrOutput) ToDnsRecordSrvPtrOutput() DnsRecordSrvPtrOutput {
	return o
}

func (o DnsRecordSrvPtrOutput) ToDnsRecordSrvPtrOutputWithContext(ctx context.Context) DnsRecordSrvPtrOutput {
	return o
}

func (o DnsRecordSrvPtrOutput) Elem() DnsRecordSrvOutput {
	return o.ApplyT(func(v *DnsRecordSrv) DnsRecordSrv {
		if v != nil {
			return *v
		}
		var ret DnsRecordSrv
		return ret
	}).(DnsRecordSrvOutput)
}

// The TCP or UDP port on which the service is to be found.
func (o DnsRecordSrvPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsRecordSrv) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The priority of the target host, lower value means more preferred.
func (o DnsRecordSrvPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsRecordSrv) *int {
		if v == nil {
			return nil
		}
		return &v.Priority
	}).(pulumi.IntPtrOutput)
}

// The canonical hostname of the machine providing the service, ending in a dot.
func (o DnsRecordSrvPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsRecordSrv) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

// A relative weight for records with the same priority, higher value means higher chance of getting picked.
func (o DnsRecordSrvPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsRecordSrv) *int {
		if v == nil {
			return nil
		}
		return &v.Weight
	}).(pulumi.IntPtrOutput)
}

type ProjectEnvironment struct {
	// The git branch of the Environment Variable.
	GitBranch *string `pulumi:"gitBranch"`
	// The ID of the Environment Variable.
	Id *string `pulumi:"id"`
	// The name of the Environment Variable.
	Key string `pulumi:"key"`
	// Whether the Environment Variable is sensitive or not.
	Sensitive *bool `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The value of the Environment Variable.
	Value string `pulumi:"value"`
}

// ProjectEnvironmentInput is an input type that accepts ProjectEnvironmentArgs and ProjectEnvironmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentInput` via:
//
//	ProjectEnvironmentArgs{...}
type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(context.Context) ProjectEnvironmentOutput
}

type ProjectEnvironmentArgs struct {
	// The git branch of the Environment Variable.
	GitBranch pulumi.StringPtrInput `pulumi:"gitBranch"`
	// The ID of the Environment Variable.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Environment Variable.
	Key pulumi.StringInput `pulumi:"key"`
	// Whether the Environment Variable is sensitive or not.
	Sensitive pulumi.BoolPtrInput `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
	// The value of the Environment Variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

// ProjectEnvironmentArrayInput is an input type that accepts ProjectEnvironmentArray and ProjectEnvironmentArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentArrayInput` via:
//
//	ProjectEnvironmentArray{ ProjectEnvironmentArgs{...} }
type ProjectEnvironmentArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput
	ToProjectEnvironmentArrayOutputWithContext(context.Context) ProjectEnvironmentArrayOutput
}

type ProjectEnvironmentArray []ProjectEnvironmentInput

func (ProjectEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return i.ToProjectEnvironmentArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentArrayOutput)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

// The git branch of the Environment Variable.
func (o ProjectEnvironmentOutput) GitBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.GitBranch }).(pulumi.StringPtrOutput)
}

// The ID of the Environment Variable.
func (o ProjectEnvironmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Environment Variable.
func (o ProjectEnvironmentOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Key }).(pulumi.StringOutput)
}

// Whether the Environment Variable is sensitive or not.
func (o ProjectEnvironmentOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
func (o ProjectEnvironmentOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// The value of the Environment Variable.
func (o ProjectEnvironmentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironment {
		return vs[0].([]ProjectEnvironment)[vs[1].(int)]
	}).(ProjectEnvironmentOutput)
}

type ProjectGitComments struct {
	// Whether Commit comments are enabled
	OnCommit bool `pulumi:"onCommit"`
	// Whether Pull Request comments are enabled
	OnPullRequest bool `pulumi:"onPullRequest"`
}

// ProjectGitCommentsInput is an input type that accepts ProjectGitCommentsArgs and ProjectGitCommentsOutput values.
// You can construct a concrete instance of `ProjectGitCommentsInput` via:
//
//	ProjectGitCommentsArgs{...}
type ProjectGitCommentsInput interface {
	pulumi.Input

	ToProjectGitCommentsOutput() ProjectGitCommentsOutput
	ToProjectGitCommentsOutputWithContext(context.Context) ProjectGitCommentsOutput
}

type ProjectGitCommentsArgs struct {
	// Whether Commit comments are enabled
	OnCommit pulumi.BoolInput `pulumi:"onCommit"`
	// Whether Pull Request comments are enabled
	OnPullRequest pulumi.BoolInput `pulumi:"onPullRequest"`
}

func (ProjectGitCommentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitComments)(nil)).Elem()
}

func (i ProjectGitCommentsArgs) ToProjectGitCommentsOutput() ProjectGitCommentsOutput {
	return i.ToProjectGitCommentsOutputWithContext(context.Background())
}

func (i ProjectGitCommentsArgs) ToProjectGitCommentsOutputWithContext(ctx context.Context) ProjectGitCommentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitCommentsOutput)
}

func (i ProjectGitCommentsArgs) ToProjectGitCommentsPtrOutput() ProjectGitCommentsPtrOutput {
	return i.ToProjectGitCommentsPtrOutputWithContext(context.Background())
}

func (i ProjectGitCommentsArgs) ToProjectGitCommentsPtrOutputWithContext(ctx context.Context) ProjectGitCommentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitCommentsOutput).ToProjectGitCommentsPtrOutputWithContext(ctx)
}

// ProjectGitCommentsPtrInput is an input type that accepts ProjectGitCommentsArgs, ProjectGitCommentsPtr and ProjectGitCommentsPtrOutput values.
// You can construct a concrete instance of `ProjectGitCommentsPtrInput` via:
//
//	        ProjectGitCommentsArgs{...}
//
//	or:
//
//	        nil
type ProjectGitCommentsPtrInput interface {
	pulumi.Input

	ToProjectGitCommentsPtrOutput() ProjectGitCommentsPtrOutput
	ToProjectGitCommentsPtrOutputWithContext(context.Context) ProjectGitCommentsPtrOutput
}

type projectGitCommentsPtrType ProjectGitCommentsArgs

func ProjectGitCommentsPtr(v *ProjectGitCommentsArgs) ProjectGitCommentsPtrInput {
	return (*projectGitCommentsPtrType)(v)
}

func (*projectGitCommentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitComments)(nil)).Elem()
}

func (i *projectGitCommentsPtrType) ToProjectGitCommentsPtrOutput() ProjectGitCommentsPtrOutput {
	return i.ToProjectGitCommentsPtrOutputWithContext(context.Background())
}

func (i *projectGitCommentsPtrType) ToProjectGitCommentsPtrOutputWithContext(ctx context.Context) ProjectGitCommentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitCommentsPtrOutput)
}

type ProjectGitCommentsOutput struct{ *pulumi.OutputState }

func (ProjectGitCommentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitComments)(nil)).Elem()
}

func (o ProjectGitCommentsOutput) ToProjectGitCommentsOutput() ProjectGitCommentsOutput {
	return o
}

func (o ProjectGitCommentsOutput) ToProjectGitCommentsOutputWithContext(ctx context.Context) ProjectGitCommentsOutput {
	return o
}

func (o ProjectGitCommentsOutput) ToProjectGitCommentsPtrOutput() ProjectGitCommentsPtrOutput {
	return o.ToProjectGitCommentsPtrOutputWithContext(context.Background())
}

func (o ProjectGitCommentsOutput) ToProjectGitCommentsPtrOutputWithContext(ctx context.Context) ProjectGitCommentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectGitComments) *ProjectGitComments {
		return &v
	}).(ProjectGitCommentsPtrOutput)
}

// Whether Commit comments are enabled
func (o ProjectGitCommentsOutput) OnCommit() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectGitComments) bool { return v.OnCommit }).(pulumi.BoolOutput)
}

// Whether Pull Request comments are enabled
func (o ProjectGitCommentsOutput) OnPullRequest() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectGitComments) bool { return v.OnPullRequest }).(pulumi.BoolOutput)
}

type ProjectGitCommentsPtrOutput struct{ *pulumi.OutputState }

func (ProjectGitCommentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitComments)(nil)).Elem()
}

func (o ProjectGitCommentsPtrOutput) ToProjectGitCommentsPtrOutput() ProjectGitCommentsPtrOutput {
	return o
}

func (o ProjectGitCommentsPtrOutput) ToProjectGitCommentsPtrOutputWithContext(ctx context.Context) ProjectGitCommentsPtrOutput {
	return o
}

func (o ProjectGitCommentsPtrOutput) Elem() ProjectGitCommentsOutput {
	return o.ApplyT(func(v *ProjectGitComments) ProjectGitComments {
		if v != nil {
			return *v
		}
		var ret ProjectGitComments
		return ret
	}).(ProjectGitCommentsOutput)
}

// Whether Commit comments are enabled
func (o ProjectGitCommentsPtrOutput) OnCommit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectGitComments) *bool {
		if v == nil {
			return nil
		}
		return &v.OnCommit
	}).(pulumi.BoolPtrOutput)
}

// Whether Pull Request comments are enabled
func (o ProjectGitCommentsPtrOutput) OnPullRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectGitComments) *bool {
		if v == nil {
			return nil
		}
		return &v.OnPullRequest
	}).(pulumi.BoolPtrOutput)
}

type ProjectGitRepository struct {
	// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
	DeployHooks []ProjectGitRepositoryDeployHook `pulumi:"deployHooks"`
	// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
	ProductionBranch *string `pulumi:"productionBranch"`
	// The name of the git repository. For example: `vercel/next.js`.
	Repo string `pulumi:"repo"`
	// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
	Type string `pulumi:"type"`
}

// ProjectGitRepositoryInput is an input type that accepts ProjectGitRepositoryArgs and ProjectGitRepositoryOutput values.
// You can construct a concrete instance of `ProjectGitRepositoryInput` via:
//
//	ProjectGitRepositoryArgs{...}
type ProjectGitRepositoryInput interface {
	pulumi.Input

	ToProjectGitRepositoryOutput() ProjectGitRepositoryOutput
	ToProjectGitRepositoryOutputWithContext(context.Context) ProjectGitRepositoryOutput
}

type ProjectGitRepositoryArgs struct {
	// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
	DeployHooks ProjectGitRepositoryDeployHookArrayInput `pulumi:"deployHooks"`
	// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
	ProductionBranch pulumi.StringPtrInput `pulumi:"productionBranch"`
	// The name of the git repository. For example: `vercel/next.js`.
	Repo pulumi.StringInput `pulumi:"repo"`
	// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectGitRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitRepository)(nil)).Elem()
}

func (i ProjectGitRepositoryArgs) ToProjectGitRepositoryOutput() ProjectGitRepositoryOutput {
	return i.ToProjectGitRepositoryOutputWithContext(context.Background())
}

func (i ProjectGitRepositoryArgs) ToProjectGitRepositoryOutputWithContext(ctx context.Context) ProjectGitRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitRepositoryOutput)
}

func (i ProjectGitRepositoryArgs) ToProjectGitRepositoryPtrOutput() ProjectGitRepositoryPtrOutput {
	return i.ToProjectGitRepositoryPtrOutputWithContext(context.Background())
}

func (i ProjectGitRepositoryArgs) ToProjectGitRepositoryPtrOutputWithContext(ctx context.Context) ProjectGitRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitRepositoryOutput).ToProjectGitRepositoryPtrOutputWithContext(ctx)
}

// ProjectGitRepositoryPtrInput is an input type that accepts ProjectGitRepositoryArgs, ProjectGitRepositoryPtr and ProjectGitRepositoryPtrOutput values.
// You can construct a concrete instance of `ProjectGitRepositoryPtrInput` via:
//
//	        ProjectGitRepositoryArgs{...}
//
//	or:
//
//	        nil
type ProjectGitRepositoryPtrInput interface {
	pulumi.Input

	ToProjectGitRepositoryPtrOutput() ProjectGitRepositoryPtrOutput
	ToProjectGitRepositoryPtrOutputWithContext(context.Context) ProjectGitRepositoryPtrOutput
}

type projectGitRepositoryPtrType ProjectGitRepositoryArgs

func ProjectGitRepositoryPtr(v *ProjectGitRepositoryArgs) ProjectGitRepositoryPtrInput {
	return (*projectGitRepositoryPtrType)(v)
}

func (*projectGitRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitRepository)(nil)).Elem()
}

func (i *projectGitRepositoryPtrType) ToProjectGitRepositoryPtrOutput() ProjectGitRepositoryPtrOutput {
	return i.ToProjectGitRepositoryPtrOutputWithContext(context.Background())
}

func (i *projectGitRepositoryPtrType) ToProjectGitRepositoryPtrOutputWithContext(ctx context.Context) ProjectGitRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitRepositoryPtrOutput)
}

type ProjectGitRepositoryOutput struct{ *pulumi.OutputState }

func (ProjectGitRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitRepository)(nil)).Elem()
}

func (o ProjectGitRepositoryOutput) ToProjectGitRepositoryOutput() ProjectGitRepositoryOutput {
	return o
}

func (o ProjectGitRepositoryOutput) ToProjectGitRepositoryOutputWithContext(ctx context.Context) ProjectGitRepositoryOutput {
	return o
}

func (o ProjectGitRepositoryOutput) ToProjectGitRepositoryPtrOutput() ProjectGitRepositoryPtrOutput {
	return o.ToProjectGitRepositoryPtrOutputWithContext(context.Background())
}

func (o ProjectGitRepositoryOutput) ToProjectGitRepositoryPtrOutputWithContext(ctx context.Context) ProjectGitRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectGitRepository) *ProjectGitRepository {
		return &v
	}).(ProjectGitRepositoryPtrOutput)
}

// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
func (o ProjectGitRepositoryOutput) DeployHooks() ProjectGitRepositoryDeployHookArrayOutput {
	return o.ApplyT(func(v ProjectGitRepository) []ProjectGitRepositoryDeployHook { return v.DeployHooks }).(ProjectGitRepositoryDeployHookArrayOutput)
}

// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
func (o ProjectGitRepositoryOutput) ProductionBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectGitRepository) *string { return v.ProductionBranch }).(pulumi.StringPtrOutput)
}

// The name of the git repository. For example: `vercel/next.js`.
func (o ProjectGitRepositoryOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectGitRepository) string { return v.Repo }).(pulumi.StringOutput)
}

// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
func (o ProjectGitRepositoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectGitRepository) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectGitRepositoryPtrOutput struct{ *pulumi.OutputState }

func (ProjectGitRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGitRepository)(nil)).Elem()
}

func (o ProjectGitRepositoryPtrOutput) ToProjectGitRepositoryPtrOutput() ProjectGitRepositoryPtrOutput {
	return o
}

func (o ProjectGitRepositoryPtrOutput) ToProjectGitRepositoryPtrOutputWithContext(ctx context.Context) ProjectGitRepositoryPtrOutput {
	return o
}

func (o ProjectGitRepositoryPtrOutput) Elem() ProjectGitRepositoryOutput {
	return o.ApplyT(func(v *ProjectGitRepository) ProjectGitRepository {
		if v != nil {
			return *v
		}
		var ret ProjectGitRepository
		return ret
	}).(ProjectGitRepositoryOutput)
}

// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
func (o ProjectGitRepositoryPtrOutput) DeployHooks() ProjectGitRepositoryDeployHookArrayOutput {
	return o.ApplyT(func(v *ProjectGitRepository) []ProjectGitRepositoryDeployHook {
		if v == nil {
			return nil
		}
		return v.DeployHooks
	}).(ProjectGitRepositoryDeployHookArrayOutput)
}

// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
func (o ProjectGitRepositoryPtrOutput) ProductionBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.ProductionBranch
	}).(pulumi.StringPtrOutput)
}

// The name of the git repository. For example: `vercel/next.js`.
func (o ProjectGitRepositoryPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectGitRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Repo
	}).(pulumi.StringPtrOutput)
}

// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
func (o ProjectGitRepositoryPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectGitRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectGitRepositoryDeployHook struct {
	// The ID of the deploy hook.
	Id *string `pulumi:"id"`
	// The name of the deploy hook.
	Name string `pulumi:"name"`
	// The branch or commit hash that should be deployed.
	Ref string `pulumi:"ref"`
	// A URL that, when a POST request is made to, will trigger a new deployment.
	Url *string `pulumi:"url"`
}

// ProjectGitRepositoryDeployHookInput is an input type that accepts ProjectGitRepositoryDeployHookArgs and ProjectGitRepositoryDeployHookOutput values.
// You can construct a concrete instance of `ProjectGitRepositoryDeployHookInput` via:
//
//	ProjectGitRepositoryDeployHookArgs{...}
type ProjectGitRepositoryDeployHookInput interface {
	pulumi.Input

	ToProjectGitRepositoryDeployHookOutput() ProjectGitRepositoryDeployHookOutput
	ToProjectGitRepositoryDeployHookOutputWithContext(context.Context) ProjectGitRepositoryDeployHookOutput
}

type ProjectGitRepositoryDeployHookArgs struct {
	// The ID of the deploy hook.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the deploy hook.
	Name pulumi.StringInput `pulumi:"name"`
	// The branch or commit hash that should be deployed.
	Ref pulumi.StringInput `pulumi:"ref"`
	// A URL that, when a POST request is made to, will trigger a new deployment.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ProjectGitRepositoryDeployHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (i ProjectGitRepositoryDeployHookArgs) ToProjectGitRepositoryDeployHookOutput() ProjectGitRepositoryDeployHookOutput {
	return i.ToProjectGitRepositoryDeployHookOutputWithContext(context.Background())
}

func (i ProjectGitRepositoryDeployHookArgs) ToProjectGitRepositoryDeployHookOutputWithContext(ctx context.Context) ProjectGitRepositoryDeployHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitRepositoryDeployHookOutput)
}

// ProjectGitRepositoryDeployHookArrayInput is an input type that accepts ProjectGitRepositoryDeployHookArray and ProjectGitRepositoryDeployHookArrayOutput values.
// You can construct a concrete instance of `ProjectGitRepositoryDeployHookArrayInput` via:
//
//	ProjectGitRepositoryDeployHookArray{ ProjectGitRepositoryDeployHookArgs{...} }
type ProjectGitRepositoryDeployHookArrayInput interface {
	pulumi.Input

	ToProjectGitRepositoryDeployHookArrayOutput() ProjectGitRepositoryDeployHookArrayOutput
	ToProjectGitRepositoryDeployHookArrayOutputWithContext(context.Context) ProjectGitRepositoryDeployHookArrayOutput
}

type ProjectGitRepositoryDeployHookArray []ProjectGitRepositoryDeployHookInput

func (ProjectGitRepositoryDeployHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (i ProjectGitRepositoryDeployHookArray) ToProjectGitRepositoryDeployHookArrayOutput() ProjectGitRepositoryDeployHookArrayOutput {
	return i.ToProjectGitRepositoryDeployHookArrayOutputWithContext(context.Background())
}

func (i ProjectGitRepositoryDeployHookArray) ToProjectGitRepositoryDeployHookArrayOutputWithContext(ctx context.Context) ProjectGitRepositoryDeployHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGitRepositoryDeployHookArrayOutput)
}

type ProjectGitRepositoryDeployHookOutput struct{ *pulumi.OutputState }

func (ProjectGitRepositoryDeployHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (o ProjectGitRepositoryDeployHookOutput) ToProjectGitRepositoryDeployHookOutput() ProjectGitRepositoryDeployHookOutput {
	return o
}

func (o ProjectGitRepositoryDeployHookOutput) ToProjectGitRepositoryDeployHookOutputWithContext(ctx context.Context) ProjectGitRepositoryDeployHookOutput {
	return o
}

// The ID of the deploy hook.
func (o ProjectGitRepositoryDeployHookOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectGitRepositoryDeployHook) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the deploy hook.
func (o ProjectGitRepositoryDeployHookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectGitRepositoryDeployHook) string { return v.Name }).(pulumi.StringOutput)
}

// The branch or commit hash that should be deployed.
func (o ProjectGitRepositoryDeployHookOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectGitRepositoryDeployHook) string { return v.Ref }).(pulumi.StringOutput)
}

// A URL that, when a POST request is made to, will trigger a new deployment.
func (o ProjectGitRepositoryDeployHookOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectGitRepositoryDeployHook) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ProjectGitRepositoryDeployHookArrayOutput struct{ *pulumi.OutputState }

func (ProjectGitRepositoryDeployHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (o ProjectGitRepositoryDeployHookArrayOutput) ToProjectGitRepositoryDeployHookArrayOutput() ProjectGitRepositoryDeployHookArrayOutput {
	return o
}

func (o ProjectGitRepositoryDeployHookArrayOutput) ToProjectGitRepositoryDeployHookArrayOutputWithContext(ctx context.Context) ProjectGitRepositoryDeployHookArrayOutput {
	return o
}

func (o ProjectGitRepositoryDeployHookArrayOutput) Index(i pulumi.IntInput) ProjectGitRepositoryDeployHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectGitRepositoryDeployHook {
		return vs[0].([]ProjectGitRepositoryDeployHook)[vs[1].(int)]
	}).(ProjectGitRepositoryDeployHookOutput)
}

type ProjectPasswordProtection struct {
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, or `onlyPreviewDeployments`.
	DeploymentType string `pulumi:"deploymentType"`
	// The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.
	Password string `pulumi:"password"`
}

// ProjectPasswordProtectionInput is an input type that accepts ProjectPasswordProtectionArgs and ProjectPasswordProtectionOutput values.
// You can construct a concrete instance of `ProjectPasswordProtectionInput` via:
//
//	ProjectPasswordProtectionArgs{...}
type ProjectPasswordProtectionInput interface {
	pulumi.Input

	ToProjectPasswordProtectionOutput() ProjectPasswordProtectionOutput
	ToProjectPasswordProtectionOutputWithContext(context.Context) ProjectPasswordProtectionOutput
}

type ProjectPasswordProtectionArgs struct {
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, or `onlyPreviewDeployments`.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.
	Password pulumi.StringInput `pulumi:"password"`
}

func (ProjectPasswordProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPasswordProtection)(nil)).Elem()
}

func (i ProjectPasswordProtectionArgs) ToProjectPasswordProtectionOutput() ProjectPasswordProtectionOutput {
	return i.ToProjectPasswordProtectionOutputWithContext(context.Background())
}

func (i ProjectPasswordProtectionArgs) ToProjectPasswordProtectionOutputWithContext(ctx context.Context) ProjectPasswordProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPasswordProtectionOutput)
}

func (i ProjectPasswordProtectionArgs) ToProjectPasswordProtectionPtrOutput() ProjectPasswordProtectionPtrOutput {
	return i.ToProjectPasswordProtectionPtrOutputWithContext(context.Background())
}

func (i ProjectPasswordProtectionArgs) ToProjectPasswordProtectionPtrOutputWithContext(ctx context.Context) ProjectPasswordProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPasswordProtectionOutput).ToProjectPasswordProtectionPtrOutputWithContext(ctx)
}

// ProjectPasswordProtectionPtrInput is an input type that accepts ProjectPasswordProtectionArgs, ProjectPasswordProtectionPtr and ProjectPasswordProtectionPtrOutput values.
// You can construct a concrete instance of `ProjectPasswordProtectionPtrInput` via:
//
//	        ProjectPasswordProtectionArgs{...}
//
//	or:
//
//	        nil
type ProjectPasswordProtectionPtrInput interface {
	pulumi.Input

	ToProjectPasswordProtectionPtrOutput() ProjectPasswordProtectionPtrOutput
	ToProjectPasswordProtectionPtrOutputWithContext(context.Context) ProjectPasswordProtectionPtrOutput
}

type projectPasswordProtectionPtrType ProjectPasswordProtectionArgs

func ProjectPasswordProtectionPtr(v *ProjectPasswordProtectionArgs) ProjectPasswordProtectionPtrInput {
	return (*projectPasswordProtectionPtrType)(v)
}

func (*projectPasswordProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPasswordProtection)(nil)).Elem()
}

func (i *projectPasswordProtectionPtrType) ToProjectPasswordProtectionPtrOutput() ProjectPasswordProtectionPtrOutput {
	return i.ToProjectPasswordProtectionPtrOutputWithContext(context.Background())
}

func (i *projectPasswordProtectionPtrType) ToProjectPasswordProtectionPtrOutputWithContext(ctx context.Context) ProjectPasswordProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPasswordProtectionPtrOutput)
}

type ProjectPasswordProtectionOutput struct{ *pulumi.OutputState }

func (ProjectPasswordProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPasswordProtection)(nil)).Elem()
}

func (o ProjectPasswordProtectionOutput) ToProjectPasswordProtectionOutput() ProjectPasswordProtectionOutput {
	return o
}

func (o ProjectPasswordProtectionOutput) ToProjectPasswordProtectionOutputWithContext(ctx context.Context) ProjectPasswordProtectionOutput {
	return o
}

func (o ProjectPasswordProtectionOutput) ToProjectPasswordProtectionPtrOutput() ProjectPasswordProtectionPtrOutput {
	return o.ToProjectPasswordProtectionPtrOutputWithContext(context.Background())
}

func (o ProjectPasswordProtectionOutput) ToProjectPasswordProtectionPtrOutputWithContext(ctx context.Context) ProjectPasswordProtectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectPasswordProtection) *ProjectPasswordProtection {
		return &v
	}).(ProjectPasswordProtectionPtrOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, or `onlyPreviewDeployments`.
func (o ProjectPasswordProtectionOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPasswordProtection) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.
func (o ProjectPasswordProtectionOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPasswordProtection) string { return v.Password }).(pulumi.StringOutput)
}

type ProjectPasswordProtectionPtrOutput struct{ *pulumi.OutputState }

func (ProjectPasswordProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPasswordProtection)(nil)).Elem()
}

func (o ProjectPasswordProtectionPtrOutput) ToProjectPasswordProtectionPtrOutput() ProjectPasswordProtectionPtrOutput {
	return o
}

func (o ProjectPasswordProtectionPtrOutput) ToProjectPasswordProtectionPtrOutputWithContext(ctx context.Context) ProjectPasswordProtectionPtrOutput {
	return o
}

func (o ProjectPasswordProtectionPtrOutput) Elem() ProjectPasswordProtectionOutput {
	return o.ApplyT(func(v *ProjectPasswordProtection) ProjectPasswordProtection {
		if v != nil {
			return *v
		}
		var ret ProjectPasswordProtection
		return ret
	}).(ProjectPasswordProtectionOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, or `onlyPreviewDeployments`.
func (o ProjectPasswordProtectionPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPasswordProtection) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.
func (o ProjectPasswordProtectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPasswordProtection) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

type ProjectTrustedIps struct {
	// The allowed IP addressses and CIDR ranges with optional descriptions.
	Addresses []ProjectTrustedIpsAddress `pulumi:"addresses"`
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyProductionDeployments`, or `onlyPreviewDeployments`.
	DeploymentType string `pulumi:"deploymentType"`
	// Whether or not Trusted IPs is optional to access a deployment. Must be either `trustedIpRequired` or `trustedIpOptional`. `trustedIpOptional` is only available with Standalone Trusted IPs.
	ProtectionMode *string `pulumi:"protectionMode"`
}

// ProjectTrustedIpsInput is an input type that accepts ProjectTrustedIpsArgs and ProjectTrustedIpsOutput values.
// You can construct a concrete instance of `ProjectTrustedIpsInput` via:
//
//	ProjectTrustedIpsArgs{...}
type ProjectTrustedIpsInput interface {
	pulumi.Input

	ToProjectTrustedIpsOutput() ProjectTrustedIpsOutput
	ToProjectTrustedIpsOutputWithContext(context.Context) ProjectTrustedIpsOutput
}

type ProjectTrustedIpsArgs struct {
	// The allowed IP addressses and CIDR ranges with optional descriptions.
	Addresses ProjectTrustedIpsAddressArrayInput `pulumi:"addresses"`
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyProductionDeployments`, or `onlyPreviewDeployments`.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Whether or not Trusted IPs is optional to access a deployment. Must be either `trustedIpRequired` or `trustedIpOptional`. `trustedIpOptional` is only available with Standalone Trusted IPs.
	ProtectionMode pulumi.StringPtrInput `pulumi:"protectionMode"`
}

func (ProjectTrustedIpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTrustedIps)(nil)).Elem()
}

func (i ProjectTrustedIpsArgs) ToProjectTrustedIpsOutput() ProjectTrustedIpsOutput {
	return i.ToProjectTrustedIpsOutputWithContext(context.Background())
}

func (i ProjectTrustedIpsArgs) ToProjectTrustedIpsOutputWithContext(ctx context.Context) ProjectTrustedIpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTrustedIpsOutput)
}

func (i ProjectTrustedIpsArgs) ToProjectTrustedIpsPtrOutput() ProjectTrustedIpsPtrOutput {
	return i.ToProjectTrustedIpsPtrOutputWithContext(context.Background())
}

func (i ProjectTrustedIpsArgs) ToProjectTrustedIpsPtrOutputWithContext(ctx context.Context) ProjectTrustedIpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTrustedIpsOutput).ToProjectTrustedIpsPtrOutputWithContext(ctx)
}

// ProjectTrustedIpsPtrInput is an input type that accepts ProjectTrustedIpsArgs, ProjectTrustedIpsPtr and ProjectTrustedIpsPtrOutput values.
// You can construct a concrete instance of `ProjectTrustedIpsPtrInput` via:
//
//	        ProjectTrustedIpsArgs{...}
//
//	or:
//
//	        nil
type ProjectTrustedIpsPtrInput interface {
	pulumi.Input

	ToProjectTrustedIpsPtrOutput() ProjectTrustedIpsPtrOutput
	ToProjectTrustedIpsPtrOutputWithContext(context.Context) ProjectTrustedIpsPtrOutput
}

type projectTrustedIpsPtrType ProjectTrustedIpsArgs

func ProjectTrustedIpsPtr(v *ProjectTrustedIpsArgs) ProjectTrustedIpsPtrInput {
	return (*projectTrustedIpsPtrType)(v)
}

func (*projectTrustedIpsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTrustedIps)(nil)).Elem()
}

func (i *projectTrustedIpsPtrType) ToProjectTrustedIpsPtrOutput() ProjectTrustedIpsPtrOutput {
	return i.ToProjectTrustedIpsPtrOutputWithContext(context.Background())
}

func (i *projectTrustedIpsPtrType) ToProjectTrustedIpsPtrOutputWithContext(ctx context.Context) ProjectTrustedIpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTrustedIpsPtrOutput)
}

type ProjectTrustedIpsOutput struct{ *pulumi.OutputState }

func (ProjectTrustedIpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTrustedIps)(nil)).Elem()
}

func (o ProjectTrustedIpsOutput) ToProjectTrustedIpsOutput() ProjectTrustedIpsOutput {
	return o
}

func (o ProjectTrustedIpsOutput) ToProjectTrustedIpsOutputWithContext(ctx context.Context) ProjectTrustedIpsOutput {
	return o
}

func (o ProjectTrustedIpsOutput) ToProjectTrustedIpsPtrOutput() ProjectTrustedIpsPtrOutput {
	return o.ToProjectTrustedIpsPtrOutputWithContext(context.Background())
}

func (o ProjectTrustedIpsOutput) ToProjectTrustedIpsPtrOutputWithContext(ctx context.Context) ProjectTrustedIpsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectTrustedIps) *ProjectTrustedIps {
		return &v
	}).(ProjectTrustedIpsPtrOutput)
}

// The allowed IP addressses and CIDR ranges with optional descriptions.
func (o ProjectTrustedIpsOutput) Addresses() ProjectTrustedIpsAddressArrayOutput {
	return o.ApplyT(func(v ProjectTrustedIps) []ProjectTrustedIpsAddress { return v.Addresses }).(ProjectTrustedIpsAddressArrayOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyProductionDeployments`, or `onlyPreviewDeployments`.
func (o ProjectTrustedIpsOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTrustedIps) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Whether or not Trusted IPs is optional to access a deployment. Must be either `trustedIpRequired` or `trustedIpOptional`. `trustedIpOptional` is only available with Standalone Trusted IPs.
func (o ProjectTrustedIpsOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTrustedIps) *string { return v.ProtectionMode }).(pulumi.StringPtrOutput)
}

type ProjectTrustedIpsPtrOutput struct{ *pulumi.OutputState }

func (ProjectTrustedIpsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTrustedIps)(nil)).Elem()
}

func (o ProjectTrustedIpsPtrOutput) ToProjectTrustedIpsPtrOutput() ProjectTrustedIpsPtrOutput {
	return o
}

func (o ProjectTrustedIpsPtrOutput) ToProjectTrustedIpsPtrOutputWithContext(ctx context.Context) ProjectTrustedIpsPtrOutput {
	return o
}

func (o ProjectTrustedIpsPtrOutput) Elem() ProjectTrustedIpsOutput {
	return o.ApplyT(func(v *ProjectTrustedIps) ProjectTrustedIps {
		if v != nil {
			return *v
		}
		var ret ProjectTrustedIps
		return ret
	}).(ProjectTrustedIpsOutput)
}

// The allowed IP addressses and CIDR ranges with optional descriptions.
func (o ProjectTrustedIpsPtrOutput) Addresses() ProjectTrustedIpsAddressArrayOutput {
	return o.ApplyT(func(v *ProjectTrustedIps) []ProjectTrustedIpsAddress {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(ProjectTrustedIpsAddressArrayOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyProductionDeployments`, or `onlyPreviewDeployments`.
func (o ProjectTrustedIpsPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTrustedIps) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// Whether or not Trusted IPs is optional to access a deployment. Must be either `trustedIpRequired` or `trustedIpOptional`. `trustedIpOptional` is only available with Standalone Trusted IPs.
func (o ProjectTrustedIpsPtrOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTrustedIps) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionMode
	}).(pulumi.StringPtrOutput)
}

type ProjectTrustedIpsAddress struct {
	// A description for the value
	Note *string `pulumi:"note"`
	// The address or CIDR range that can access deployments.
	Value string `pulumi:"value"`
}

// ProjectTrustedIpsAddressInput is an input type that accepts ProjectTrustedIpsAddressArgs and ProjectTrustedIpsAddressOutput values.
// You can construct a concrete instance of `ProjectTrustedIpsAddressInput` via:
//
//	ProjectTrustedIpsAddressArgs{...}
type ProjectTrustedIpsAddressInput interface {
	pulumi.Input

	ToProjectTrustedIpsAddressOutput() ProjectTrustedIpsAddressOutput
	ToProjectTrustedIpsAddressOutputWithContext(context.Context) ProjectTrustedIpsAddressOutput
}

type ProjectTrustedIpsAddressArgs struct {
	// A description for the value
	Note pulumi.StringPtrInput `pulumi:"note"`
	// The address or CIDR range that can access deployments.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectTrustedIpsAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTrustedIpsAddress)(nil)).Elem()
}

func (i ProjectTrustedIpsAddressArgs) ToProjectTrustedIpsAddressOutput() ProjectTrustedIpsAddressOutput {
	return i.ToProjectTrustedIpsAddressOutputWithContext(context.Background())
}

func (i ProjectTrustedIpsAddressArgs) ToProjectTrustedIpsAddressOutputWithContext(ctx context.Context) ProjectTrustedIpsAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTrustedIpsAddressOutput)
}

// ProjectTrustedIpsAddressArrayInput is an input type that accepts ProjectTrustedIpsAddressArray and ProjectTrustedIpsAddressArrayOutput values.
// You can construct a concrete instance of `ProjectTrustedIpsAddressArrayInput` via:
//
//	ProjectTrustedIpsAddressArray{ ProjectTrustedIpsAddressArgs{...} }
type ProjectTrustedIpsAddressArrayInput interface {
	pulumi.Input

	ToProjectTrustedIpsAddressArrayOutput() ProjectTrustedIpsAddressArrayOutput
	ToProjectTrustedIpsAddressArrayOutputWithContext(context.Context) ProjectTrustedIpsAddressArrayOutput
}

type ProjectTrustedIpsAddressArray []ProjectTrustedIpsAddressInput

func (ProjectTrustedIpsAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTrustedIpsAddress)(nil)).Elem()
}

func (i ProjectTrustedIpsAddressArray) ToProjectTrustedIpsAddressArrayOutput() ProjectTrustedIpsAddressArrayOutput {
	return i.ToProjectTrustedIpsAddressArrayOutputWithContext(context.Background())
}

func (i ProjectTrustedIpsAddressArray) ToProjectTrustedIpsAddressArrayOutputWithContext(ctx context.Context) ProjectTrustedIpsAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTrustedIpsAddressArrayOutput)
}

type ProjectTrustedIpsAddressOutput struct{ *pulumi.OutputState }

func (ProjectTrustedIpsAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTrustedIpsAddress)(nil)).Elem()
}

func (o ProjectTrustedIpsAddressOutput) ToProjectTrustedIpsAddressOutput() ProjectTrustedIpsAddressOutput {
	return o
}

func (o ProjectTrustedIpsAddressOutput) ToProjectTrustedIpsAddressOutputWithContext(ctx context.Context) ProjectTrustedIpsAddressOutput {
	return o
}

// A description for the value
func (o ProjectTrustedIpsAddressOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTrustedIpsAddress) *string { return v.Note }).(pulumi.StringPtrOutput)
}

// The address or CIDR range that can access deployments.
func (o ProjectTrustedIpsAddressOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTrustedIpsAddress) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectTrustedIpsAddressArrayOutput struct{ *pulumi.OutputState }

func (ProjectTrustedIpsAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTrustedIpsAddress)(nil)).Elem()
}

func (o ProjectTrustedIpsAddressArrayOutput) ToProjectTrustedIpsAddressArrayOutput() ProjectTrustedIpsAddressArrayOutput {
	return o
}

func (o ProjectTrustedIpsAddressArrayOutput) ToProjectTrustedIpsAddressArrayOutputWithContext(ctx context.Context) ProjectTrustedIpsAddressArrayOutput {
	return o
}

func (o ProjectTrustedIpsAddressArrayOutput) Index(i pulumi.IntInput) ProjectTrustedIpsAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTrustedIpsAddress {
		return vs[0].([]ProjectTrustedIpsAddress)[vs[1].(int)]
	}).(ProjectTrustedIpsAddressOutput)
}

type ProjectVercelAuthentication struct {
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyPreviewDeployments`, or `none`.
	DeploymentType string `pulumi:"deploymentType"`
}

// ProjectVercelAuthenticationInput is an input type that accepts ProjectVercelAuthenticationArgs and ProjectVercelAuthenticationOutput values.
// You can construct a concrete instance of `ProjectVercelAuthenticationInput` via:
//
//	ProjectVercelAuthenticationArgs{...}
type ProjectVercelAuthenticationInput interface {
	pulumi.Input

	ToProjectVercelAuthenticationOutput() ProjectVercelAuthenticationOutput
	ToProjectVercelAuthenticationOutputWithContext(context.Context) ProjectVercelAuthenticationOutput
}

type ProjectVercelAuthenticationArgs struct {
	// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyPreviewDeployments`, or `none`.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
}

func (ProjectVercelAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVercelAuthentication)(nil)).Elem()
}

func (i ProjectVercelAuthenticationArgs) ToProjectVercelAuthenticationOutput() ProjectVercelAuthenticationOutput {
	return i.ToProjectVercelAuthenticationOutputWithContext(context.Background())
}

func (i ProjectVercelAuthenticationArgs) ToProjectVercelAuthenticationOutputWithContext(ctx context.Context) ProjectVercelAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVercelAuthenticationOutput)
}

func (i ProjectVercelAuthenticationArgs) ToProjectVercelAuthenticationPtrOutput() ProjectVercelAuthenticationPtrOutput {
	return i.ToProjectVercelAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectVercelAuthenticationArgs) ToProjectVercelAuthenticationPtrOutputWithContext(ctx context.Context) ProjectVercelAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVercelAuthenticationOutput).ToProjectVercelAuthenticationPtrOutputWithContext(ctx)
}

// ProjectVercelAuthenticationPtrInput is an input type that accepts ProjectVercelAuthenticationArgs, ProjectVercelAuthenticationPtr and ProjectVercelAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectVercelAuthenticationPtrInput` via:
//
//	        ProjectVercelAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectVercelAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectVercelAuthenticationPtrOutput() ProjectVercelAuthenticationPtrOutput
	ToProjectVercelAuthenticationPtrOutputWithContext(context.Context) ProjectVercelAuthenticationPtrOutput
}

type projectVercelAuthenticationPtrType ProjectVercelAuthenticationArgs

func ProjectVercelAuthenticationPtr(v *ProjectVercelAuthenticationArgs) ProjectVercelAuthenticationPtrInput {
	return (*projectVercelAuthenticationPtrType)(v)
}

func (*projectVercelAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVercelAuthentication)(nil)).Elem()
}

func (i *projectVercelAuthenticationPtrType) ToProjectVercelAuthenticationPtrOutput() ProjectVercelAuthenticationPtrOutput {
	return i.ToProjectVercelAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectVercelAuthenticationPtrType) ToProjectVercelAuthenticationPtrOutputWithContext(ctx context.Context) ProjectVercelAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVercelAuthenticationPtrOutput)
}

type ProjectVercelAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectVercelAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVercelAuthentication)(nil)).Elem()
}

func (o ProjectVercelAuthenticationOutput) ToProjectVercelAuthenticationOutput() ProjectVercelAuthenticationOutput {
	return o
}

func (o ProjectVercelAuthenticationOutput) ToProjectVercelAuthenticationOutputWithContext(ctx context.Context) ProjectVercelAuthenticationOutput {
	return o
}

func (o ProjectVercelAuthenticationOutput) ToProjectVercelAuthenticationPtrOutput() ProjectVercelAuthenticationPtrOutput {
	return o.ToProjectVercelAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectVercelAuthenticationOutput) ToProjectVercelAuthenticationPtrOutputWithContext(ctx context.Context) ProjectVercelAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectVercelAuthentication) *ProjectVercelAuthentication {
		return &v
	}).(ProjectVercelAuthenticationPtrOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyPreviewDeployments`, or `none`.
func (o ProjectVercelAuthenticationOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectVercelAuthentication) string { return v.DeploymentType }).(pulumi.StringOutput)
}

type ProjectVercelAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectVercelAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVercelAuthentication)(nil)).Elem()
}

func (o ProjectVercelAuthenticationPtrOutput) ToProjectVercelAuthenticationPtrOutput() ProjectVercelAuthenticationPtrOutput {
	return o
}

func (o ProjectVercelAuthenticationPtrOutput) ToProjectVercelAuthenticationPtrOutputWithContext(ctx context.Context) ProjectVercelAuthenticationPtrOutput {
	return o
}

func (o ProjectVercelAuthenticationPtrOutput) Elem() ProjectVercelAuthenticationOutput {
	return o.ApplyT(func(v *ProjectVercelAuthentication) ProjectVercelAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectVercelAuthentication
		return ret
	}).(ProjectVercelAuthenticationOutput)
}

// The deployment environment to protect. Must be one of `standardProtection`, `allDeployments`, `onlyPreviewDeployments`, or `none`.
func (o ProjectVercelAuthenticationPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectVercelAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

type GetProjectEnvironment struct {
	// The git branch of the environment variable.
	GitBranch string `pulumi:"gitBranch"`
	// The ID of the environment variable
	Id string `pulumi:"id"`
	// The name of the environment variable.
	Key string `pulumi:"key"`
	// Whether the Environment Variable is sensitive or not. Note that the value will be `null` for sensitive environment variables.
	Sensitive bool `pulumi:"sensitive"`
	// The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// GetProjectEnvironmentInput is an input type that accepts GetProjectEnvironmentArgs and GetProjectEnvironmentOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentInput` via:
//
//	GetProjectEnvironmentArgs{...}
type GetProjectEnvironmentInput interface {
	pulumi.Input

	ToGetProjectEnvironmentOutput() GetProjectEnvironmentOutput
	ToGetProjectEnvironmentOutputWithContext(context.Context) GetProjectEnvironmentOutput
}

type GetProjectEnvironmentArgs struct {
	// The git branch of the environment variable.
	GitBranch pulumi.StringInput `pulumi:"gitBranch"`
	// The ID of the environment variable
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the environment variable.
	Key pulumi.StringInput `pulumi:"key"`
	// Whether the Environment Variable is sensitive or not. Note that the value will be `null` for sensitive environment variables.
	Sensitive pulumi.BoolInput `pulumi:"sensitive"`
	// The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironment)(nil)).Elem()
}

func (i GetProjectEnvironmentArgs) ToGetProjectEnvironmentOutput() GetProjectEnvironmentOutput {
	return i.ToGetProjectEnvironmentOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentArgs) ToGetProjectEnvironmentOutputWithContext(ctx context.Context) GetProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentOutput)
}

// GetProjectEnvironmentArrayInput is an input type that accepts GetProjectEnvironmentArray and GetProjectEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentArrayInput` via:
//
//	GetProjectEnvironmentArray{ GetProjectEnvironmentArgs{...} }
type GetProjectEnvironmentArrayInput interface {
	pulumi.Input

	ToGetProjectEnvironmentArrayOutput() GetProjectEnvironmentArrayOutput
	ToGetProjectEnvironmentArrayOutputWithContext(context.Context) GetProjectEnvironmentArrayOutput
}

type GetProjectEnvironmentArray []GetProjectEnvironmentInput

func (GetProjectEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironment)(nil)).Elem()
}

func (i GetProjectEnvironmentArray) ToGetProjectEnvironmentArrayOutput() GetProjectEnvironmentArrayOutput {
	return i.ToGetProjectEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentArray) ToGetProjectEnvironmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentArrayOutput)
}

type GetProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironment)(nil)).Elem()
}

func (o GetProjectEnvironmentOutput) ToGetProjectEnvironmentOutput() GetProjectEnvironmentOutput {
	return o
}

func (o GetProjectEnvironmentOutput) ToGetProjectEnvironmentOutputWithContext(ctx context.Context) GetProjectEnvironmentOutput {
	return o
}

// The git branch of the environment variable.
func (o GetProjectEnvironmentOutput) GitBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironment) string { return v.GitBranch }).(pulumi.StringOutput)
}

// The ID of the environment variable
func (o GetProjectEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the environment variable.
func (o GetProjectEnvironmentOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironment) string { return v.Key }).(pulumi.StringOutput)
}

// Whether the Environment Variable is sensitive or not. Note that the value will be `null` for sensitive environment variables.
func (o GetProjectEnvironmentOutput) Sensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectEnvironment) bool { return v.Sensitive }).(pulumi.BoolOutput)
}

// The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.
func (o GetProjectEnvironmentOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectEnvironment) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// The value of the environment variable.
func (o GetProjectEnvironmentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironment) string { return v.Value }).(pulumi.StringOutput)
}

type GetProjectEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironment)(nil)).Elem()
}

func (o GetProjectEnvironmentArrayOutput) ToGetProjectEnvironmentArrayOutput() GetProjectEnvironmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentArrayOutput) ToGetProjectEnvironmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentArrayOutput) Index(i pulumi.IntInput) GetProjectEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectEnvironment {
		return vs[0].([]GetProjectEnvironment)[vs[1].(int)]
	}).(GetProjectEnvironmentOutput)
}

type GetProjectGitComments struct {
	// Whether Commit comments are enabled
	OnCommit bool `pulumi:"onCommit"`
	// Whether Pull Request comments are enabled
	OnPullRequest bool `pulumi:"onPullRequest"`
}

// GetProjectGitCommentsInput is an input type that accepts GetProjectGitCommentsArgs and GetProjectGitCommentsOutput values.
// You can construct a concrete instance of `GetProjectGitCommentsInput` via:
//
//	GetProjectGitCommentsArgs{...}
type GetProjectGitCommentsInput interface {
	pulumi.Input

	ToGetProjectGitCommentsOutput() GetProjectGitCommentsOutput
	ToGetProjectGitCommentsOutputWithContext(context.Context) GetProjectGitCommentsOutput
}

type GetProjectGitCommentsArgs struct {
	// Whether Commit comments are enabled
	OnCommit pulumi.BoolInput `pulumi:"onCommit"`
	// Whether Pull Request comments are enabled
	OnPullRequest pulumi.BoolInput `pulumi:"onPullRequest"`
}

func (GetProjectGitCommentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitComments)(nil)).Elem()
}

func (i GetProjectGitCommentsArgs) ToGetProjectGitCommentsOutput() GetProjectGitCommentsOutput {
	return i.ToGetProjectGitCommentsOutputWithContext(context.Background())
}

func (i GetProjectGitCommentsArgs) ToGetProjectGitCommentsOutputWithContext(ctx context.Context) GetProjectGitCommentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectGitCommentsOutput)
}

type GetProjectGitCommentsOutput struct{ *pulumi.OutputState }

func (GetProjectGitCommentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitComments)(nil)).Elem()
}

func (o GetProjectGitCommentsOutput) ToGetProjectGitCommentsOutput() GetProjectGitCommentsOutput {
	return o
}

func (o GetProjectGitCommentsOutput) ToGetProjectGitCommentsOutputWithContext(ctx context.Context) GetProjectGitCommentsOutput {
	return o
}

// Whether Commit comments are enabled
func (o GetProjectGitCommentsOutput) OnCommit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectGitComments) bool { return v.OnCommit }).(pulumi.BoolOutput)
}

// Whether Pull Request comments are enabled
func (o GetProjectGitCommentsOutput) OnPullRequest() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectGitComments) bool { return v.OnPullRequest }).(pulumi.BoolOutput)
}

type GetProjectGitRepository struct {
	// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
	DeployHooks []GetProjectGitRepositoryDeployHook `pulumi:"deployHooks"`
	// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
	ProductionBranch string `pulumi:"productionBranch"`
	// The name of the git repository. For example: `vercel/next.js`.
	Repo string `pulumi:"repo"`
	// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
	Type string `pulumi:"type"`
}

// GetProjectGitRepositoryInput is an input type that accepts GetProjectGitRepositoryArgs and GetProjectGitRepositoryOutput values.
// You can construct a concrete instance of `GetProjectGitRepositoryInput` via:
//
//	GetProjectGitRepositoryArgs{...}
type GetProjectGitRepositoryInput interface {
	pulumi.Input

	ToGetProjectGitRepositoryOutput() GetProjectGitRepositoryOutput
	ToGetProjectGitRepositoryOutputWithContext(context.Context) GetProjectGitRepositoryOutput
}

type GetProjectGitRepositoryArgs struct {
	// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
	DeployHooks GetProjectGitRepositoryDeployHookArrayInput `pulumi:"deployHooks"`
	// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
	ProductionBranch pulumi.StringInput `pulumi:"productionBranch"`
	// The name of the git repository. For example: `vercel/next.js`.
	Repo pulumi.StringInput `pulumi:"repo"`
	// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetProjectGitRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitRepository)(nil)).Elem()
}

func (i GetProjectGitRepositoryArgs) ToGetProjectGitRepositoryOutput() GetProjectGitRepositoryOutput {
	return i.ToGetProjectGitRepositoryOutputWithContext(context.Background())
}

func (i GetProjectGitRepositoryArgs) ToGetProjectGitRepositoryOutputWithContext(ctx context.Context) GetProjectGitRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectGitRepositoryOutput)
}

type GetProjectGitRepositoryOutput struct{ *pulumi.OutputState }

func (GetProjectGitRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitRepository)(nil)).Elem()
}

func (o GetProjectGitRepositoryOutput) ToGetProjectGitRepositoryOutput() GetProjectGitRepositoryOutput {
	return o
}

func (o GetProjectGitRepositoryOutput) ToGetProjectGitRepositoryOutputWithContext(ctx context.Context) GetProjectGitRepositoryOutput {
	return o
}

// Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.
func (o GetProjectGitRepositoryOutput) DeployHooks() GetProjectGitRepositoryDeployHookArrayOutput {
	return o.ApplyT(func(v GetProjectGitRepository) []GetProjectGitRepositoryDeployHook { return v.DeployHooks }).(GetProjectGitRepositoryDeployHookArrayOutput)
}

// By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.
func (o GetProjectGitRepositoryOutput) ProductionBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepository) string { return v.ProductionBranch }).(pulumi.StringOutput)
}

// The name of the git repository. For example: `vercel/next.js`.
func (o GetProjectGitRepositoryOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepository) string { return v.Repo }).(pulumi.StringOutput)
}

// The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.
func (o GetProjectGitRepositoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepository) string { return v.Type }).(pulumi.StringOutput)
}

type GetProjectGitRepositoryDeployHook struct {
	// The ID of the deploy hook.
	Id string `pulumi:"id"`
	// The name of the deploy hook.
	Name string `pulumi:"name"`
	// The branch or commit hash that should be deployed.
	Ref string `pulumi:"ref"`
	// A URL that, when a POST request is made to, will trigger a new deployment.
	Url string `pulumi:"url"`
}

// GetProjectGitRepositoryDeployHookInput is an input type that accepts GetProjectGitRepositoryDeployHookArgs and GetProjectGitRepositoryDeployHookOutput values.
// You can construct a concrete instance of `GetProjectGitRepositoryDeployHookInput` via:
//
//	GetProjectGitRepositoryDeployHookArgs{...}
type GetProjectGitRepositoryDeployHookInput interface {
	pulumi.Input

	ToGetProjectGitRepositoryDeployHookOutput() GetProjectGitRepositoryDeployHookOutput
	ToGetProjectGitRepositoryDeployHookOutputWithContext(context.Context) GetProjectGitRepositoryDeployHookOutput
}

type GetProjectGitRepositoryDeployHookArgs struct {
	// The ID of the deploy hook.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the deploy hook.
	Name pulumi.StringInput `pulumi:"name"`
	// The branch or commit hash that should be deployed.
	Ref pulumi.StringInput `pulumi:"ref"`
	// A URL that, when a POST request is made to, will trigger a new deployment.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetProjectGitRepositoryDeployHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (i GetProjectGitRepositoryDeployHookArgs) ToGetProjectGitRepositoryDeployHookOutput() GetProjectGitRepositoryDeployHookOutput {
	return i.ToGetProjectGitRepositoryDeployHookOutputWithContext(context.Background())
}

func (i GetProjectGitRepositoryDeployHookArgs) ToGetProjectGitRepositoryDeployHookOutputWithContext(ctx context.Context) GetProjectGitRepositoryDeployHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectGitRepositoryDeployHookOutput)
}

// GetProjectGitRepositoryDeployHookArrayInput is an input type that accepts GetProjectGitRepositoryDeployHookArray and GetProjectGitRepositoryDeployHookArrayOutput values.
// You can construct a concrete instance of `GetProjectGitRepositoryDeployHookArrayInput` via:
//
//	GetProjectGitRepositoryDeployHookArray{ GetProjectGitRepositoryDeployHookArgs{...} }
type GetProjectGitRepositoryDeployHookArrayInput interface {
	pulumi.Input

	ToGetProjectGitRepositoryDeployHookArrayOutput() GetProjectGitRepositoryDeployHookArrayOutput
	ToGetProjectGitRepositoryDeployHookArrayOutputWithContext(context.Context) GetProjectGitRepositoryDeployHookArrayOutput
}

type GetProjectGitRepositoryDeployHookArray []GetProjectGitRepositoryDeployHookInput

func (GetProjectGitRepositoryDeployHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (i GetProjectGitRepositoryDeployHookArray) ToGetProjectGitRepositoryDeployHookArrayOutput() GetProjectGitRepositoryDeployHookArrayOutput {
	return i.ToGetProjectGitRepositoryDeployHookArrayOutputWithContext(context.Background())
}

func (i GetProjectGitRepositoryDeployHookArray) ToGetProjectGitRepositoryDeployHookArrayOutputWithContext(ctx context.Context) GetProjectGitRepositoryDeployHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectGitRepositoryDeployHookArrayOutput)
}

type GetProjectGitRepositoryDeployHookOutput struct{ *pulumi.OutputState }

func (GetProjectGitRepositoryDeployHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (o GetProjectGitRepositoryDeployHookOutput) ToGetProjectGitRepositoryDeployHookOutput() GetProjectGitRepositoryDeployHookOutput {
	return o
}

func (o GetProjectGitRepositoryDeployHookOutput) ToGetProjectGitRepositoryDeployHookOutputWithContext(ctx context.Context) GetProjectGitRepositoryDeployHookOutput {
	return o
}

// The ID of the deploy hook.
func (o GetProjectGitRepositoryDeployHookOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepositoryDeployHook) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the deploy hook.
func (o GetProjectGitRepositoryDeployHookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepositoryDeployHook) string { return v.Name }).(pulumi.StringOutput)
}

// The branch or commit hash that should be deployed.
func (o GetProjectGitRepositoryDeployHookOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepositoryDeployHook) string { return v.Ref }).(pulumi.StringOutput)
}

// A URL that, when a POST request is made to, will trigger a new deployment.
func (o GetProjectGitRepositoryDeployHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectGitRepositoryDeployHook) string { return v.Url }).(pulumi.StringOutput)
}

type GetProjectGitRepositoryDeployHookArrayOutput struct{ *pulumi.OutputState }

func (GetProjectGitRepositoryDeployHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectGitRepositoryDeployHook)(nil)).Elem()
}

func (o GetProjectGitRepositoryDeployHookArrayOutput) ToGetProjectGitRepositoryDeployHookArrayOutput() GetProjectGitRepositoryDeployHookArrayOutput {
	return o
}

func (o GetProjectGitRepositoryDeployHookArrayOutput) ToGetProjectGitRepositoryDeployHookArrayOutputWithContext(ctx context.Context) GetProjectGitRepositoryDeployHookArrayOutput {
	return o
}

func (o GetProjectGitRepositoryDeployHookArrayOutput) Index(i pulumi.IntInput) GetProjectGitRepositoryDeployHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectGitRepositoryDeployHook {
		return vs[0].([]GetProjectGitRepositoryDeployHook)[vs[1].(int)]
	}).(GetProjectGitRepositoryDeployHookOutput)
}

type GetProjectPasswordProtection struct {
	// The deployment environment that will be protected.
	DeploymentType string `pulumi:"deploymentType"`
}

// GetProjectPasswordProtectionInput is an input type that accepts GetProjectPasswordProtectionArgs and GetProjectPasswordProtectionOutput values.
// You can construct a concrete instance of `GetProjectPasswordProtectionInput` via:
//
//	GetProjectPasswordProtectionArgs{...}
type GetProjectPasswordProtectionInput interface {
	pulumi.Input

	ToGetProjectPasswordProtectionOutput() GetProjectPasswordProtectionOutput
	ToGetProjectPasswordProtectionOutputWithContext(context.Context) GetProjectPasswordProtectionOutput
}

type GetProjectPasswordProtectionArgs struct {
	// The deployment environment that will be protected.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
}

func (GetProjectPasswordProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPasswordProtection)(nil)).Elem()
}

func (i GetProjectPasswordProtectionArgs) ToGetProjectPasswordProtectionOutput() GetProjectPasswordProtectionOutput {
	return i.ToGetProjectPasswordProtectionOutputWithContext(context.Background())
}

func (i GetProjectPasswordProtectionArgs) ToGetProjectPasswordProtectionOutputWithContext(ctx context.Context) GetProjectPasswordProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPasswordProtectionOutput)
}

type GetProjectPasswordProtectionOutput struct{ *pulumi.OutputState }

func (GetProjectPasswordProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPasswordProtection)(nil)).Elem()
}

func (o GetProjectPasswordProtectionOutput) ToGetProjectPasswordProtectionOutput() GetProjectPasswordProtectionOutput {
	return o
}

func (o GetProjectPasswordProtectionOutput) ToGetProjectPasswordProtectionOutputWithContext(ctx context.Context) GetProjectPasswordProtectionOutput {
	return o
}

// The deployment environment that will be protected.
func (o GetProjectPasswordProtectionOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPasswordProtection) string { return v.DeploymentType }).(pulumi.StringOutput)
}

type GetProjectTrustedIps struct {
	// The allowed IP addressses and CIDR ranges with optional descriptions.
	Addresses []GetProjectTrustedIpsAddress `pulumi:"addresses"`
	// The deployment environment that will be protected.
	DeploymentType string `pulumi:"deploymentType"`
	// Whether or not Trusted IPs is required or optional to access a deployment.
	ProtectionMode string `pulumi:"protectionMode"`
}

// GetProjectTrustedIpsInput is an input type that accepts GetProjectTrustedIpsArgs and GetProjectTrustedIpsOutput values.
// You can construct a concrete instance of `GetProjectTrustedIpsInput` via:
//
//	GetProjectTrustedIpsArgs{...}
type GetProjectTrustedIpsInput interface {
	pulumi.Input

	ToGetProjectTrustedIpsOutput() GetProjectTrustedIpsOutput
	ToGetProjectTrustedIpsOutputWithContext(context.Context) GetProjectTrustedIpsOutput
}

type GetProjectTrustedIpsArgs struct {
	// The allowed IP addressses and CIDR ranges with optional descriptions.
	Addresses GetProjectTrustedIpsAddressArrayInput `pulumi:"addresses"`
	// The deployment environment that will be protected.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Whether or not Trusted IPs is required or optional to access a deployment.
	ProtectionMode pulumi.StringInput `pulumi:"protectionMode"`
}

func (GetProjectTrustedIpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTrustedIps)(nil)).Elem()
}

func (i GetProjectTrustedIpsArgs) ToGetProjectTrustedIpsOutput() GetProjectTrustedIpsOutput {
	return i.ToGetProjectTrustedIpsOutputWithContext(context.Background())
}

func (i GetProjectTrustedIpsArgs) ToGetProjectTrustedIpsOutputWithContext(ctx context.Context) GetProjectTrustedIpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTrustedIpsOutput)
}

type GetProjectTrustedIpsOutput struct{ *pulumi.OutputState }

func (GetProjectTrustedIpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTrustedIps)(nil)).Elem()
}

func (o GetProjectTrustedIpsOutput) ToGetProjectTrustedIpsOutput() GetProjectTrustedIpsOutput {
	return o
}

func (o GetProjectTrustedIpsOutput) ToGetProjectTrustedIpsOutputWithContext(ctx context.Context) GetProjectTrustedIpsOutput {
	return o
}

// The allowed IP addressses and CIDR ranges with optional descriptions.
func (o GetProjectTrustedIpsOutput) Addresses() GetProjectTrustedIpsAddressArrayOutput {
	return o.ApplyT(func(v GetProjectTrustedIps) []GetProjectTrustedIpsAddress { return v.Addresses }).(GetProjectTrustedIpsAddressArrayOutput)
}

// The deployment environment that will be protected.
func (o GetProjectTrustedIpsOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTrustedIps) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Whether or not Trusted IPs is required or optional to access a deployment.
func (o GetProjectTrustedIpsOutput) ProtectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTrustedIps) string { return v.ProtectionMode }).(pulumi.StringOutput)
}

type GetProjectTrustedIpsAddress struct {
	Note  string `pulumi:"note"`
	Value string `pulumi:"value"`
}

// GetProjectTrustedIpsAddressInput is an input type that accepts GetProjectTrustedIpsAddressArgs and GetProjectTrustedIpsAddressOutput values.
// You can construct a concrete instance of `GetProjectTrustedIpsAddressInput` via:
//
//	GetProjectTrustedIpsAddressArgs{...}
type GetProjectTrustedIpsAddressInput interface {
	pulumi.Input

	ToGetProjectTrustedIpsAddressOutput() GetProjectTrustedIpsAddressOutput
	ToGetProjectTrustedIpsAddressOutputWithContext(context.Context) GetProjectTrustedIpsAddressOutput
}

type GetProjectTrustedIpsAddressArgs struct {
	Note  pulumi.StringInput `pulumi:"note"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetProjectTrustedIpsAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTrustedIpsAddress)(nil)).Elem()
}

func (i GetProjectTrustedIpsAddressArgs) ToGetProjectTrustedIpsAddressOutput() GetProjectTrustedIpsAddressOutput {
	return i.ToGetProjectTrustedIpsAddressOutputWithContext(context.Background())
}

func (i GetProjectTrustedIpsAddressArgs) ToGetProjectTrustedIpsAddressOutputWithContext(ctx context.Context) GetProjectTrustedIpsAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTrustedIpsAddressOutput)
}

// GetProjectTrustedIpsAddressArrayInput is an input type that accepts GetProjectTrustedIpsAddressArray and GetProjectTrustedIpsAddressArrayOutput values.
// You can construct a concrete instance of `GetProjectTrustedIpsAddressArrayInput` via:
//
//	GetProjectTrustedIpsAddressArray{ GetProjectTrustedIpsAddressArgs{...} }
type GetProjectTrustedIpsAddressArrayInput interface {
	pulumi.Input

	ToGetProjectTrustedIpsAddressArrayOutput() GetProjectTrustedIpsAddressArrayOutput
	ToGetProjectTrustedIpsAddressArrayOutputWithContext(context.Context) GetProjectTrustedIpsAddressArrayOutput
}

type GetProjectTrustedIpsAddressArray []GetProjectTrustedIpsAddressInput

func (GetProjectTrustedIpsAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTrustedIpsAddress)(nil)).Elem()
}

func (i GetProjectTrustedIpsAddressArray) ToGetProjectTrustedIpsAddressArrayOutput() GetProjectTrustedIpsAddressArrayOutput {
	return i.ToGetProjectTrustedIpsAddressArrayOutputWithContext(context.Background())
}

func (i GetProjectTrustedIpsAddressArray) ToGetProjectTrustedIpsAddressArrayOutputWithContext(ctx context.Context) GetProjectTrustedIpsAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTrustedIpsAddressArrayOutput)
}

type GetProjectTrustedIpsAddressOutput struct{ *pulumi.OutputState }

func (GetProjectTrustedIpsAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTrustedIpsAddress)(nil)).Elem()
}

func (o GetProjectTrustedIpsAddressOutput) ToGetProjectTrustedIpsAddressOutput() GetProjectTrustedIpsAddressOutput {
	return o
}

func (o GetProjectTrustedIpsAddressOutput) ToGetProjectTrustedIpsAddressOutputWithContext(ctx context.Context) GetProjectTrustedIpsAddressOutput {
	return o
}

func (o GetProjectTrustedIpsAddressOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTrustedIpsAddress) string { return v.Note }).(pulumi.StringOutput)
}

func (o GetProjectTrustedIpsAddressOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTrustedIpsAddress) string { return v.Value }).(pulumi.StringOutput)
}

type GetProjectTrustedIpsAddressArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTrustedIpsAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTrustedIpsAddress)(nil)).Elem()
}

func (o GetProjectTrustedIpsAddressArrayOutput) ToGetProjectTrustedIpsAddressArrayOutput() GetProjectTrustedIpsAddressArrayOutput {
	return o
}

func (o GetProjectTrustedIpsAddressArrayOutput) ToGetProjectTrustedIpsAddressArrayOutputWithContext(ctx context.Context) GetProjectTrustedIpsAddressArrayOutput {
	return o
}

func (o GetProjectTrustedIpsAddressArrayOutput) Index(i pulumi.IntInput) GetProjectTrustedIpsAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTrustedIpsAddress {
		return vs[0].([]GetProjectTrustedIpsAddress)[vs[1].(int)]
	}).(GetProjectTrustedIpsAddressOutput)
}

type GetProjectVercelAuthentication struct {
	// The deployment environment that will be protected.
	DeploymentType string `pulumi:"deploymentType"`
}

// GetProjectVercelAuthenticationInput is an input type that accepts GetProjectVercelAuthenticationArgs and GetProjectVercelAuthenticationOutput values.
// You can construct a concrete instance of `GetProjectVercelAuthenticationInput` via:
//
//	GetProjectVercelAuthenticationArgs{...}
type GetProjectVercelAuthenticationInput interface {
	pulumi.Input

	ToGetProjectVercelAuthenticationOutput() GetProjectVercelAuthenticationOutput
	ToGetProjectVercelAuthenticationOutputWithContext(context.Context) GetProjectVercelAuthenticationOutput
}

type GetProjectVercelAuthenticationArgs struct {
	// The deployment environment that will be protected.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
}

func (GetProjectVercelAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVercelAuthentication)(nil)).Elem()
}

func (i GetProjectVercelAuthenticationArgs) ToGetProjectVercelAuthenticationOutput() GetProjectVercelAuthenticationOutput {
	return i.ToGetProjectVercelAuthenticationOutputWithContext(context.Background())
}

func (i GetProjectVercelAuthenticationArgs) ToGetProjectVercelAuthenticationOutputWithContext(ctx context.Context) GetProjectVercelAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectVercelAuthenticationOutput)
}

type GetProjectVercelAuthenticationOutput struct{ *pulumi.OutputState }

func (GetProjectVercelAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVercelAuthentication)(nil)).Elem()
}

func (o GetProjectVercelAuthenticationOutput) ToGetProjectVercelAuthenticationOutput() GetProjectVercelAuthenticationOutput {
	return o
}

func (o GetProjectVercelAuthenticationOutput) ToGetProjectVercelAuthenticationOutputWithContext(ctx context.Context) GetProjectVercelAuthenticationOutput {
	return o
}

// The deployment environment that will be protected.
func (o GetProjectVercelAuthenticationOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVercelAuthentication) string { return v.DeploymentType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentProjectSettingsInput)(nil)).Elem(), DeploymentProjectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentProjectSettingsPtrInput)(nil)).Elem(), DeploymentProjectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordSrvInput)(nil)).Elem(), DnsRecordSrvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordSrvPtrInput)(nil)).Elem(), DnsRecordSrvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentInput)(nil)).Elem(), ProjectEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentArrayInput)(nil)).Elem(), ProjectEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitCommentsInput)(nil)).Elem(), ProjectGitCommentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitCommentsPtrInput)(nil)).Elem(), ProjectGitCommentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitRepositoryInput)(nil)).Elem(), ProjectGitRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitRepositoryPtrInput)(nil)).Elem(), ProjectGitRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitRepositoryDeployHookInput)(nil)).Elem(), ProjectGitRepositoryDeployHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGitRepositoryDeployHookArrayInput)(nil)).Elem(), ProjectGitRepositoryDeployHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPasswordProtectionInput)(nil)).Elem(), ProjectPasswordProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPasswordProtectionPtrInput)(nil)).Elem(), ProjectPasswordProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTrustedIpsInput)(nil)).Elem(), ProjectTrustedIpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTrustedIpsPtrInput)(nil)).Elem(), ProjectTrustedIpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTrustedIpsAddressInput)(nil)).Elem(), ProjectTrustedIpsAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTrustedIpsAddressArrayInput)(nil)).Elem(), ProjectTrustedIpsAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectVercelAuthenticationInput)(nil)).Elem(), ProjectVercelAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectVercelAuthenticationPtrInput)(nil)).Elem(), ProjectVercelAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentInput)(nil)).Elem(), GetProjectEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentArrayInput)(nil)).Elem(), GetProjectEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectGitCommentsInput)(nil)).Elem(), GetProjectGitCommentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectGitRepositoryInput)(nil)).Elem(), GetProjectGitRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectGitRepositoryDeployHookInput)(nil)).Elem(), GetProjectGitRepositoryDeployHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectGitRepositoryDeployHookArrayInput)(nil)).Elem(), GetProjectGitRepositoryDeployHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPasswordProtectionInput)(nil)).Elem(), GetProjectPasswordProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTrustedIpsInput)(nil)).Elem(), GetProjectTrustedIpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTrustedIpsAddressInput)(nil)).Elem(), GetProjectTrustedIpsAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTrustedIpsAddressArrayInput)(nil)).Elem(), GetProjectTrustedIpsAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectVercelAuthenticationInput)(nil)).Elem(), GetProjectVercelAuthenticationArgs{})
	pulumi.RegisterOutputType(DeploymentProjectSettingsOutput{})
	pulumi.RegisterOutputType(DeploymentProjectSettingsPtrOutput{})
	pulumi.RegisterOutputType(DnsRecordSrvOutput{})
	pulumi.RegisterOutputType(DnsRecordSrvPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectGitCommentsOutput{})
	pulumi.RegisterOutputType(ProjectGitCommentsPtrOutput{})
	pulumi.RegisterOutputType(ProjectGitRepositoryOutput{})
	pulumi.RegisterOutputType(ProjectGitRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ProjectGitRepositoryDeployHookOutput{})
	pulumi.RegisterOutputType(ProjectGitRepositoryDeployHookArrayOutput{})
	pulumi.RegisterOutputType(ProjectPasswordProtectionOutput{})
	pulumi.RegisterOutputType(ProjectPasswordProtectionPtrOutput{})
	pulumi.RegisterOutputType(ProjectTrustedIpsOutput{})
	pulumi.RegisterOutputType(ProjectTrustedIpsPtrOutput{})
	pulumi.RegisterOutputType(ProjectTrustedIpsAddressOutput{})
	pulumi.RegisterOutputType(ProjectTrustedIpsAddressArrayOutput{})
	pulumi.RegisterOutputType(ProjectVercelAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectVercelAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetProjectGitCommentsOutput{})
	pulumi.RegisterOutputType(GetProjectGitRepositoryOutput{})
	pulumi.RegisterOutputType(GetProjectGitRepositoryDeployHookOutput{})
	pulumi.RegisterOutputType(GetProjectGitRepositoryDeployHookArrayOutput{})
	pulumi.RegisterOutputType(GetProjectPasswordProtectionOutput{})
	pulumi.RegisterOutputType(GetProjectTrustedIpsOutput{})
	pulumi.RegisterOutputType(GetProjectTrustedIpsAddressOutput{})
	pulumi.RegisterOutputType(GetProjectTrustedIpsAddressArrayOutput{})
	pulumi.RegisterOutputType(GetProjectVercelAuthenticationOutput{})
}
