// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

func LookupSharedEnvironmentVariable(ctx *pulumi.Context, args *LookupSharedEnvironmentVariableArgs, opts ...pulumi.InvokeOption) (*LookupSharedEnvironmentVariableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSharedEnvironmentVariableResult
	err := ctx.Invoke("vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableArgs struct {
	Id      *string  `pulumi:"id"`
	Key     *string  `pulumi:"key"`
	Targets []string `pulumi:"targets"`
	TeamId  *string  `pulumi:"teamId"`
}

// A collection of values returned by getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableResult struct {
	Comment    string   `pulumi:"comment"`
	Id         string   `pulumi:"id"`
	Key        string   `pulumi:"key"`
	ProjectIds []string `pulumi:"projectIds"`
	Sensitive  bool     `pulumi:"sensitive"`
	Targets    []string `pulumi:"targets"`
	TeamId     string   `pulumi:"teamId"`
	Value      string   `pulumi:"value"`
}

func LookupSharedEnvironmentVariableOutput(ctx *pulumi.Context, args LookupSharedEnvironmentVariableOutputArgs, opts ...pulumi.InvokeOption) LookupSharedEnvironmentVariableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSharedEnvironmentVariableResultOutput, error) {
			args := v.(LookupSharedEnvironmentVariableArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSharedEnvironmentVariableResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable", args, &rv, "", opts...)
			if err != nil {
				return LookupSharedEnvironmentVariableResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSharedEnvironmentVariableResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSharedEnvironmentVariableResultOutput), nil
			}
			return output, nil
		}).(LookupSharedEnvironmentVariableResultOutput)
}

// A collection of arguments for invoking getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableOutputArgs struct {
	Id      pulumi.StringPtrInput   `pulumi:"id"`
	Key     pulumi.StringPtrInput   `pulumi:"key"`
	Targets pulumi.StringArrayInput `pulumi:"targets"`
	TeamId  pulumi.StringPtrInput   `pulumi:"teamId"`
}

func (LookupSharedEnvironmentVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedEnvironmentVariableArgs)(nil)).Elem()
}

// A collection of values returned by getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableResultOutput struct{ *pulumi.OutputState }

func (LookupSharedEnvironmentVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedEnvironmentVariableResult)(nil)).Elem()
}

func (o LookupSharedEnvironmentVariableResultOutput) ToLookupSharedEnvironmentVariableResultOutput() LookupSharedEnvironmentVariableResultOutput {
	return o
}

func (o LookupSharedEnvironmentVariableResultOutput) ToLookupSharedEnvironmentVariableResultOutputWithContext(ctx context.Context) LookupSharedEnvironmentVariableResultOutput {
	return o
}

func (o LookupSharedEnvironmentVariableResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Comment }).(pulumi.StringOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) []string { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) Sensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) bool { return v.Sensitive }).(pulumi.BoolOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func (o LookupSharedEnvironmentVariableResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSharedEnvironmentVariableResultOutput{})
}
