// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel/internal"
)

type EdgeConfigToken struct {
	pulumi.CustomResourceState

	// A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our
	// Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringOutput `pulumi:"edgeConfigId"`
	// The label of the Edge Config Token.
	Label pulumi.StringOutput `pulumi:"label"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
	// not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewEdgeConfigToken registers a new resource with the given unique name, arguments, and options.
func NewEdgeConfigToken(ctx *pulumi.Context,
	name string, args *EdgeConfigTokenArgs, opts ...pulumi.ResourceOption) (*EdgeConfigToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeConfigId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeConfigId'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeConfigToken
	err := ctx.RegisterResource("vercel:index/edgeConfigToken:EdgeConfigToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeConfigToken gets an existing EdgeConfigToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeConfigToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeConfigTokenState, opts ...pulumi.ResourceOption) (*EdgeConfigToken, error) {
	var resource EdgeConfigToken
	err := ctx.ReadResource("vercel:index/edgeConfigToken:EdgeConfigToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeConfigToken resources.
type edgeConfigTokenState struct {
	// A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our
	// Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
	ConnectionString *string `pulumi:"connectionString"`
	// The ID of the Edge Config store.
	EdgeConfigId *string `pulumi:"edgeConfigId"`
	// The label of the Edge Config Token.
	Label *string `pulumi:"label"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
	// not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
	Token *string `pulumi:"token"`
}

type EdgeConfigTokenState struct {
	// A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our
	// Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
	ConnectionString pulumi.StringPtrInput
	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringPtrInput
	// The label of the Edge Config Token.
	Label pulumi.StringPtrInput
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
	// not been set in the provider.
	TeamId pulumi.StringPtrInput
	// A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
	Token pulumi.StringPtrInput
}

func (EdgeConfigTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeConfigTokenState)(nil)).Elem()
}

type edgeConfigTokenArgs struct {
	// The ID of the Edge Config store.
	EdgeConfigId string `pulumi:"edgeConfigId"`
	// The label of the Edge Config Token.
	Label string `pulumi:"label"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
	// not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a EdgeConfigToken resource.
type EdgeConfigTokenArgs struct {
	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringInput
	// The label of the Edge Config Token.
	Label pulumi.StringInput
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
	// not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (EdgeConfigTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeConfigTokenArgs)(nil)).Elem()
}

type EdgeConfigTokenInput interface {
	pulumi.Input

	ToEdgeConfigTokenOutput() EdgeConfigTokenOutput
	ToEdgeConfigTokenOutputWithContext(ctx context.Context) EdgeConfigTokenOutput
}

func (*EdgeConfigToken) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeConfigToken)(nil)).Elem()
}

func (i *EdgeConfigToken) ToEdgeConfigTokenOutput() EdgeConfigTokenOutput {
	return i.ToEdgeConfigTokenOutputWithContext(context.Background())
}

func (i *EdgeConfigToken) ToEdgeConfigTokenOutputWithContext(ctx context.Context) EdgeConfigTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigTokenOutput)
}

// EdgeConfigTokenArrayInput is an input type that accepts EdgeConfigTokenArray and EdgeConfigTokenArrayOutput values.
// You can construct a concrete instance of `EdgeConfigTokenArrayInput` via:
//
//	EdgeConfigTokenArray{ EdgeConfigTokenArgs{...} }
type EdgeConfigTokenArrayInput interface {
	pulumi.Input

	ToEdgeConfigTokenArrayOutput() EdgeConfigTokenArrayOutput
	ToEdgeConfigTokenArrayOutputWithContext(context.Context) EdgeConfigTokenArrayOutput
}

type EdgeConfigTokenArray []EdgeConfigTokenInput

func (EdgeConfigTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeConfigToken)(nil)).Elem()
}

func (i EdgeConfigTokenArray) ToEdgeConfigTokenArrayOutput() EdgeConfigTokenArrayOutput {
	return i.ToEdgeConfigTokenArrayOutputWithContext(context.Background())
}

func (i EdgeConfigTokenArray) ToEdgeConfigTokenArrayOutputWithContext(ctx context.Context) EdgeConfigTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigTokenArrayOutput)
}

// EdgeConfigTokenMapInput is an input type that accepts EdgeConfigTokenMap and EdgeConfigTokenMapOutput values.
// You can construct a concrete instance of `EdgeConfigTokenMapInput` via:
//
//	EdgeConfigTokenMap{ "key": EdgeConfigTokenArgs{...} }
type EdgeConfigTokenMapInput interface {
	pulumi.Input

	ToEdgeConfigTokenMapOutput() EdgeConfigTokenMapOutput
	ToEdgeConfigTokenMapOutputWithContext(context.Context) EdgeConfigTokenMapOutput
}

type EdgeConfigTokenMap map[string]EdgeConfigTokenInput

func (EdgeConfigTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeConfigToken)(nil)).Elem()
}

func (i EdgeConfigTokenMap) ToEdgeConfigTokenMapOutput() EdgeConfigTokenMapOutput {
	return i.ToEdgeConfigTokenMapOutputWithContext(context.Background())
}

func (i EdgeConfigTokenMap) ToEdgeConfigTokenMapOutputWithContext(ctx context.Context) EdgeConfigTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigTokenMapOutput)
}

type EdgeConfigTokenOutput struct{ *pulumi.OutputState }

func (EdgeConfigTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeConfigToken)(nil)).Elem()
}

func (o EdgeConfigTokenOutput) ToEdgeConfigTokenOutput() EdgeConfigTokenOutput {
	return o
}

func (o EdgeConfigTokenOutput) ToEdgeConfigTokenOutputWithContext(ctx context.Context) EdgeConfigTokenOutput {
	return o
}

// A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our
// Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
func (o EdgeConfigTokenOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigToken) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The ID of the Edge Config store.
func (o EdgeConfigTokenOutput) EdgeConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigToken) pulumi.StringOutput { return v.EdgeConfigId }).(pulumi.StringOutput)
}

// The label of the Edge Config Token.
func (o EdgeConfigTokenOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigToken) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has
// not been set in the provider.
func (o EdgeConfigTokenOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigToken) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
func (o EdgeConfigTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type EdgeConfigTokenArrayOutput struct{ *pulumi.OutputState }

func (EdgeConfigTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeConfigToken)(nil)).Elem()
}

func (o EdgeConfigTokenArrayOutput) ToEdgeConfigTokenArrayOutput() EdgeConfigTokenArrayOutput {
	return o
}

func (o EdgeConfigTokenArrayOutput) ToEdgeConfigTokenArrayOutputWithContext(ctx context.Context) EdgeConfigTokenArrayOutput {
	return o
}

func (o EdgeConfigTokenArrayOutput) Index(i pulumi.IntInput) EdgeConfigTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeConfigToken {
		return vs[0].([]*EdgeConfigToken)[vs[1].(int)]
	}).(EdgeConfigTokenOutput)
}

type EdgeConfigTokenMapOutput struct{ *pulumi.OutputState }

func (EdgeConfigTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeConfigToken)(nil)).Elem()
}

func (o EdgeConfigTokenMapOutput) ToEdgeConfigTokenMapOutput() EdgeConfigTokenMapOutput {
	return o
}

func (o EdgeConfigTokenMapOutput) ToEdgeConfigTokenMapOutputWithContext(ctx context.Context) EdgeConfigTokenMapOutput {
	return o
}

func (o EdgeConfigTokenMapOutput) MapIndex(k pulumi.StringInput) EdgeConfigTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeConfigToken {
		return vs[0].(map[string]*EdgeConfigToken)[vs[1].(string)]
	}).(EdgeConfigTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigTokenInput)(nil)).Elem(), &EdgeConfigToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigTokenArrayInput)(nil)).Elem(), EdgeConfigTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigTokenMapInput)(nil)).Elem(), EdgeConfigTokenMap{})
	pulumi.RegisterOutputType(EdgeConfigTokenOutput{})
	pulumi.RegisterOutputType(EdgeConfigTokenArrayOutput{})
	pulumi.RegisterOutputType(EdgeConfigTokenMapOutput{})
}
